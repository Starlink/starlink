#include "sae_par.h"
#include "prm_par.h"
#include "ndf.h"
#include "kaplibs.h"
#include "star/thr.h"
#include "mers.h"
#include <string.h>

/* Structure used to pass information to each worker thread. */
typedef struct CGEN_FUNCTION(KpgBmdnData) {
   CGEN_TYPE *out;
   const CGEN_TYPE *in;
   const size_t *dims;
   const int *hb;
   int badout;
   int bad;
   int ndim;
   int nlim;
   int sambad;
   int var;
   size_t seclo;
   size_t sechi;
   size_t wdim;
} CGEN_FUNCTION(KpgBmdnData);

/* Prototype for function that will do the work in each worker thread. */
static void CGEN_FUNCTION(kpgBmdnWork)( void *job_data_ptr, int *status );




void CGEN_FUNCTION( kpgBmdn )( ThrWorkForce *wf, int bad, int sambad, int var,
                               int ndim, const size_t dims[], const CGEN_TYPE in[],
                               const int hb[], int nlim, CGEN_TYPE out[],
                               int *badout, int *status ){
/*
*+
*  Name:
*     kpgBmdn<T>

*  Purpose:
*     Smooths an n-dimensional array using a block median filter.

*  Synopsis:
*     void kpgBmdn<T>( ThrWorkForce *wf, int bad, int sambad, int var,
*                      int ndim, const size_t dims[], const CGEN_TYPE in[],
*                      const int hb[], int nlim, CGEN_TYPE out[],
*                      int *badout, int *status )

*  Description:
*     The input array is filtered by replacing every pixel with the median
*     of the pixel values contained in an n-dimemsional rectangular region
*     centred on the required output pixel.  If the box is so large in
*     either dimension that an entire cube, plane, line, or column is
*     included for all output pixels, then the output values will be the
*     same and so can be copied rather than re-calculated.

*  Parameters:
*     wf
*        Pointer to a pool of worker threads created by the thr library,
*        or NULL (in which case the code will run in a single thread).
*     bad
*        Whether or not it is necessary to check for bad pixels in the
*        input image.
*     sambad
*        If a non-zero value is given for this parameter, then bad input
*        pixels will be propagated to the output image unchanged (a
*        smoothed output value will be calculated for all other pixels). If
*        a zero value is given, then the "nlim" parameter determines
*        whether an output pixel is good or bad.  The value of "sambad" is
*        not relevant if "bad" is zero.
*     var
*        Indicates if the input image holds data values or variance values.
*        This parameter is currently ignored (input values are assumed to
*        be data values).
*     ndim
*        The number of dimensions of the array to be smoothed.
*     dims
*        The dimensions of the input array to be smoothed and the smoothed
*        array. The supplied "dims" array should have at least "ndim"
*        elements.
*     in
*        The input array, whose dimensions are given by parameter "dims".
*     hb
*        The half-width of the filter block along the each dimension, in
*        pixels. The supplied "hb" array should have at least "ndim"
*        elements.
*     nlim
*        Minimum number of good pixels which must be present in the
*        smoothing box in order to calculate a smoothed output pixel. If
*        this minimum number is not satisfied, then a bad output pixel will
*        result.  A value between 1 and the total number of pixels in the
*        smoothing box should be supplied.
*     out
*        Returned holding the output array, whose dimensions are given by
*        parameter "dims".
*     badout
*        Returned holding the whether bad pixels are present in the output
*        image.
*     status
*        The global status.

*  Notes:
*     -  There is a function for processing single- and double-precision
*     arrays; replace <T> in the function name by F or D as appropriate.
*     The data type of the "in" and "out" arguments must match
*     the function used.

*  Copyright:
*     Copyright (C) 2022 East Asian Observatory
*     All rights reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or modify
*     it under the terms of the GNU General Public License as published by
*     the Free Software Foundation; either Version 2 of the License, or (at
*     your option) any later version.
*
*     This program is distributed in the hope that it will be useful, but
*     WITHOUT ANY WARRANTY; without even the implied warranty of
*     MERCHANTABILITY or FITNESS FOR "a" PARTICULAR PURPOSE. See the GNU
*     General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     DSB: David S. Berry (EAO)

*  History:
*     25-APR-2022 (DSB):
*        Original version, based on equivalent Fortran function by MJC.

*-
*/

/* Local Variables: */
   CGEN_FUNCTION(KpgBmdnData) *job_data;/* Pointer to array of job data structures */
   CGEN_FUNCTION(KpgBmdnData) *pdata;   /* Pointer to a single job data structure */
   int i;                /* Loop counter */
   int iw;               /* Index of a worker thread */
   int nw;               /* Number of worker threads to use */
   size_t step;          /* No. of elements to be processed by a worker */
   size_t wdim;          /* Workspace size */

/* Initialise the bad-output-pixel flag. */
   *badout = 0;

/* Check the inherited global status. */
   if( *status != SAI__OK ) return;

/* How many worker threads should we use? The final pixel axis is divided
   into disjoint sections and each worker thread processes one section.
   Therefore check for cases where the length of the final axis is less than
   the number of worker threads, in which case some worker threads remain
   idle. */
   if( wf ) {
      nw = wf->nworker;
      if( dims[ ndim - 1 ] < nw ) nw = (int) dims[ ndim - 1 ];
   } else {
      nw = 1;
   }

/* Allocate a job data structure for each used thread. */
   job_data = astMalloc( nw*sizeof(*job_data) );

/* Check pointers can be dereferenced safely. */
   if( *status == SAI__OK ){

/* Compute the dimension of the work arrays.  These should have sufficient
   capacity to store the n-dimensional box, comprising at least the product
   of the sequence (2*hb[i]+1) elements, summed over all dimensions. */
      wdim = 1;
      for( i = 0; i < ndim; i++ ){
         wdim = wdim * ( 2 * hb[ i ] + 1 );
      }

/* Find the length of each section (on the final pixel axis) that is to
   be processed by each worker thread. */
      step = dims[ ndim - 1 ]/nw;

/* Store the range of hyper-planes indices (zero-based) to be processed by
   each worker. Ensure that the last thread picks up any left-over
   hyper-planes. */
      for( iw = 0; iw < nw; iw++ ) {
         pdata = job_data + iw;
         pdata->seclo = iw*step;
         if( iw < nw - 1 ) {
            pdata->sechi = pdata->seclo + step - 1;
         } else {
            pdata->sechi = dims[ ndim - 1 ] - 1;
         }

/* Store info required by kpgBmdnWork. */
         pdata->in = in;
         pdata->out = out;
         pdata->dims = dims;
         pdata->hb = hb;
         pdata->bad = bad;
         pdata->ndim = ndim;
         pdata->nlim = nlim;
         pdata->sambad = sambad;
         pdata->var = var;
         pdata->wdim = wdim;

/* Submit the job to the workforce. This will cause the kpgBmdnWork
   function to be called, which will be passed the "pdata" pointer and a
   status pointer. */
         thrAddJob( wf, 0, pdata, CGEN_FUNCTION(kpgBmdnWork), 0, NULL,
                    status );
      }

/* Wait for all the jobs submitted above to complete. */
      thrWait( wf, status );

/* Accumulate the "badout" flags from all threads. */
      for( iw = 0; iw < nw; iw++ ) {
         pdata = job_data + iw;
         if( pdata->badout ) *badout = 1;
      }
   }

/* Free the job data structures. */
   job_data = astFree( job_data );
}

static void CGEN_FUNCTION(kpgBmdnWork)( void *job_data_ptr, int *status ) {
/*
*  Name:
*     kpgBmdnWork<X>

*  Purpose:
*     Executed in a worker thread to do various calculations for
*     kpgBmdn

*  Invocation:
*     kpgBmdnWork<X>( void *job_data_ptr, int *status )

*  Arguments:
*     job_data_ptr = KpgBmdnData<X> * (Given)
*        Data structure describing the job to be performed by the worker
*        thread.
*     status = int * (Given and Returned)
*        Inherited status.

*/

/* Local Variables: */
   CGEN_FUNCTION(KpgBmdnData) *pdata;   /* Pointer to job data structure */
   CGEN_TYPE *work1;                     /* Pointer to work array */
   int *work2;                           /* Pointer to work array */

/* Check inherited status */
   if( *status != SAI__OK ) return;

/* Get a pointer that can be used for accessing the required items in the
   supplied structure. */
   pdata = (CGEN_FUNCTION(KpgBmdnData) *) job_data_ptr;

/* Obtain workspace arrays for the smoothing algorithm. */
   work1 = astCalloc( pdata->wdim, sizeof(CGEN_TYPE) );
   work2 = astCalloc( pdata->wdim, sizeof(int) );

/* Call the function to smooth the section of the array specified by
   pdata->seclo and pdata->sechi. */
   CGEN_FUNCTION(kpgBmdnSec)( pdata->bad, pdata->sambad, pdata->var,
                              pdata->ndim, pdata->dims, pdata->seclo + 1,
                              pdata->sechi + 1, pdata->in, pdata->hb,
                              pdata->nlim, pdata->out, &(pdata->badout),
                              work1, work2, status );

/* Free the work arrays. */
   work1 = astFree( work1 );
   work2 = astFree( work2 );

}




