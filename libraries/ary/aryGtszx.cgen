#include "sae_par.h"
#include "ary1.h"
#include "star/hds.h"
#include "mers.h"
#include "ary_err.h"
#include <string.h>

void CGEN_FUNCTION(aryGtsz)( Ary *ary, CGEN_TYPE *scale, CGEN_TYPE *zero,
                             int *status ) {
/*
*+
*  Name:
*     aryGtsz<T>

*  Purpose:
*     Get the scale and zero values for an array.

*  Synopsis:
*     void aryGtsz<T>( Ary *ary, CGEN_TYPE *scale, CGEN_TYPE *zero,
*                      int *status )

*  Description:
*     This function returns the scale and zero values associated with an array.
*     If the array is not stored in scaled form, then values of 1.0 and 0.0
*     are returned.

*  Parameters:
*     ary
*        Array identifier.
*     scale
*        Returned holding the scaling factor.
*     zero
*        Returned holding the zero offset.
*     status
*        The global status.

*  Copyright:
*      Copyright (C) 2017 East Asian Observatory
*      All rights reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK)
*     DSB: David S. Berry (EAO)

*  History:
*     12-SEP-2017 (DSB):
*        Original version, based on equivalent Fortran routine by RFWS.

*-
*/

/* Local variables: */
   HDSLoc *locc = NULL;
   AryACB *acb;
   AryDCB *dcb;

/* Check inherited global status. */
   if( *status != SAI__OK ) return;

/* Import the array identifier. */
   acb = (AryACB *) ary1Impid( ary, 1, 1, 1, status );
   if( *status == SAI__OK ) {
      ARY__DCB_LOCK_MUTEX;

/* Get the DCB entry associated with this ACB entry. */
      dcb = acb->dcb;

/* Ensure that form information is available for the array. */
      ary1Dfrm( dcb, status );

/* If the array is primitive or simple, return 1.0 and 0.0. */
      if( strcmp( dcb->form, "SCALED" ) ){
         *scale = 1.0;
         *zero = 0.0;

/* For scaled arrays, ensure scaling information is available. */
      } else {
         ary1Dscl( dcb, status );

/* Get the scale and zero values from the scaling information structure
   stored in the DCB. */
         datFind( dcb->scloc, "SCALE", &locc, status );
         datGet( locc, CGEN_HDS_TYPE, 0, 0, scale, status );
         datAnnul( &locc, status );

         datFind( dcb->scloc, "ZERO", &locc, status );
         datGet( locc, CGEN_HDS_TYPE, 0, 0, zero, status );
         datAnnul( &locc, status );

      }

      ARY__DCB_UNLOCK_MUTEX;
   }

/* If an error occurred, then report context information and call the error
   tracing routine. */
   if( *status != SAI__OK ){
      errRep( " ", "aryGtsz<T>: Error getting the scale and zero values for an"
              " array.", status );
      ary1Trace( "aryGtsz<T>", status );
   }

}
