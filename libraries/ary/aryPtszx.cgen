#include "sae_par.h"
#include "ary1.h"
#include "star/hds.h"
#include "mers.h"
#include "ary_err.h"
#include <string.h>
#include "star/cmp.h"

void  CGEN_FUNCTION(aryPtsz)( Ary *ary, CGEN_TYPE scale, CGEN_TYPE zero,
                              int *status ) {
/*
*+
*  Name:
*     aryPtsz<T>

*  Purpose:
*     Set new scale and zero values for a scaled array.

*  Synopsis:
*     void aryPtsz<T>( Ary *ary, CGEN_TYPE scale, CGEN_TYPE zero, int *status )

*  Description:
*     This function sets new values for the scale and zero values
*     associated with an array. If the array is stored in simple form,
*     then the storage form is changed to scaled.

*  Parameters:
*     ary
*        Array identifier.
*     scale
*        The new value for the scaling factor.
*     zero
*        The new value for the zero offset.
*     status
*        The global status.

*  Notes:
*     -  This routine may only be used to change the type of a base
*     array. If it is called with an array which is not a base array,
*     then it will return without action. No error will result.
*     -  An error will result if the array, or any part of it, is
*     currently mapped for access (e.g. through another identifier).

*  Copyright:
*      Copyright (C) 2017 East Asian Observatory
*      All rights reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK)
*     DSB: David S. Berry (EAO)

*  History:
*     12-SEP-2017 (DSB):
*        Original version, based on equivalent Fortran routine by RFWS.

*-
*/

/* Local variables: */
   AryACB *acb;
   AryDCB *dcb;
   HDSLoc *locc = NULL;
   int there;

/* Check inherited global status. */
   if( *status != SAI__OK ) return;

/* Import the array identifier. */
   acb = (AryACB *) ary1Impid( ary, 1, 0, 1, status );

   ARY__DCB_LOCK_MUTEX;

/* Check that SCALE access to the array is available. */
   ary1Chacc( acb, "SCALE", status );
   if( *status == SAI__OK ){

/* Get the DCB entry associated with this ACB entry. */
      dcb = acb->dcb;

/* Ensure information about the storage form is available. */
      ary1Dfrm( dcb, status );

/* If the array is primitive, then it must first be converted to simple
   storage form in order to set the scaling. Check if the data object is
   mapped for access. Report an error if it is. */
      if( !strcmp( dcb->form, "PRIMITIVE" ) ){
         if( ( dcb->nwrite != 0 ) || ( dcb->nread != 0 ) ){
            *status = ARY__ISMAP;
            datMsg( "ARRAY", dcb->loc );
            errRep( " ", "The array ^ARRAY is mapped for access, perhaps "
                    "through another identifier (possible programming error).",
                    status );

/* Otherwise, perform the conversion. */
         } else {
            ary1Dp2s( dcb, status );
         }
      }

/* We can now deal with simple arrays alone. Ensure that scaling components
   exist in the data object to hold the scale and zero values. Then put
   the supplied values into them. */
      datThere( dcb->loc, "SCALE", &there, status );
      if( there ) datErase( dcb->loc, "SCALE", status );
      datNew0( dcb->loc, "SCALE", CGEN_HDS_TYPE, status );
      datFind( dcb->loc, "SCALE", &locc, status );
      datPut( locc, CGEN_HDS_TYPE, 0, 0, &scale, status );
      datAnnul( &locc, status );

      datThere( dcb->loc, "ZERO", &there, status );
      if( there ) datErase( dcb->loc, "ZERO", status );
      datNew0( dcb->loc, "ZERO", CGEN_HDS_TYPE, status );
      datFind( dcb->loc, "ZERO", &locc, status );
      datPut( locc, CGEN_HDS_TYPE, 0, 0, &zero, status );
      datAnnul( &locc, status );

/* Ensure the array storage form is scaled, in both the DCB and the data
   object. */
      datThere( dcb->loc, "VARIANT", &there, status );
      if( there ) datErase( dcb->loc, "VARIANT", status );
      datNew0C( dcb->loc, "VARIANT", 6, status );
      cmpPut0C( dcb->loc, "VARIANT", "SCALED", status );

      if( *status == SAI__OK ){
         strcpy( dcb->form, "SCALED" );

/* Remove any scaling information in the DCB. */
         if( dcb->kscl ){
            datAnnul( &dcb->scloc, status );
            dcb->kscl = 0;
         }

/* Import the scaling information from the data object into the DCB. */
         ary1Dscl( dcb, status );
      }
   }

   ARY__DCB_UNLOCK_MUTEX;

/* If an error occurred, then report context information and call the error
   tracing routine. */
   if( *status != SAI__OK ){
      errRep( " ", "aryPtsz<T>: Error setting new scale and zero values for an"
              " array.", status );
      ary1Trace( "aryPtsz<T>", status );
   }

}
