/* -*- C -*-
*+
*  Name:
*     smf_downsamp1

*  Purpose:
*     Low-level routine for downsampling data.

*  Language:
*     Starlink ANSI C

*  Type of Module:
*     Subroutine

*  Invocation:
*     void smf_downsamp1<X>( ThrWorkForce *wf, const CGEN_TYPE *in,
*                            dim_t instride, int inbytestride, dim_t inlen,
*                            void *out, dim_t outstride, int outbytestride,
*                            dim_t outlen, int todouble, int init,
*                            int isang, int *status )

*  Arguments:
*     wf = ThrWorkForce * (Given)
*        A structure holding a set of workjer threads. NOTE - THIS
*        ARGUMENT IS USED IN A DIFFERENT WAY THAN IN MOST OTHER SMF
*        FUNCTIONS. If "wf" is not NULL, then a single job will be
*        submitted to the workforce to do the resampling, and this
*        function will return immediately (i.e. it will not wait for
*        the job to complete). If "wf" is NULL, the ressampling will be
*        done in the current thread, and this function will not return
*        until the resampling is completed.
*     in = const CGEN_TYPE* (Given)
*        Pointer to input data array
*     instride = dim_t (Given)
*        Index stride between elements in the input data
*     inbytestride = int (Given)
*        If set, assume instride is in bytes, rather than array elements of
*        CGEN_TYPE
*     inlen = dim_t (Given)
*        Number of elements in the input data
*     out = const CGEN_TYPE* (Given)
*        Pointer to output re-sampled data array. Has the same data type
*        as in unless todouble is specified, in which case it is is
*        converted to double.
*     outstride = dim_t (Given)
*        Index stride between elements in the output data
*     outbytestride = int (Given)
*        If set, assume outstride is in bytes, rather than array elements of
*        the same type as out
*     outlen = dim_t (Given)
*        Number of elements in the output data
*     todouble = int (Given)
*        If set the output is typecast to double
*     init = int (Given)
*        If set out needs to be initialized to 0.
*     isang = int (Given)
*        If true output will be constrained to 0 to 2PI radians and
*        a 0 to 2PI transition on input will be trapped.
*     status = int* (Given and Returned)
*        Pointer to global status.

*  Description:
*     Down-samples the data from in to out using simple averages. You
*     can either specify normal array strides (instride/outstride) OR
*     supply strides as a number of bytes (by setting
*     inbytestride/outbytestride). This is useful if your input data
*     are elements in an array of structs. For example, if you wished
*     to downsample JCMTState.rts_end from JCMTState *state1 to
*     JCMTState *state2 you could do it like this:
*
*        smf_downsamp1D( &(state1->rts_end), sizeof(*state1), 1, inlen,
*                        &(state2->rts_end), sizeof(*state2), 1, outlen, 1,
*                        1, status );
*
*     We achieve the desired effect by specifying the strides in bytes (size
*     of a JCMTState struct) rather than the size of the structure member
*     type (size of a double).

*  Notes:
*     - Checks for VAL__BAD* are done.
*     - Bad status is set if outlen is larger than inlen
*     - fixed-point versions may suffer bad roundoff problems if values
*       are small. In future re-write, should do everything in double and then
*       typecast once at the end?
*     - If type is double probably good idea to set "todouble" anyways
*       since the non-todouble version may be slower in the future.

*  Authors:
*     Edward Chapin (UBC)
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     2010-10-15 (EC):
*        Initial version
*     2010-10-21 (EC):
*        -Check for VAL__BAD*
*        -optional strides in bytes to enable resample of JCMTState arrays
*        -optionally initialize buffer to 0 if needed
*     2012-01-19 (TIMJ):
*        Handle 0 to 360 angle crossover
*     {enter_further_changes_here}

*  Copyright:
*     Copyright (C) 2012 Science & Technology Facilities Council.
*     Copyright (C) 2010 University of British Columbia.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 3 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public
*     License along with this program; if not, write to the Free
*     Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
*     MA 02110-1301, USA

*  Bugs:
*     {note_any_bugs_here}
*-
*/

/* Standard includes */
#include <math.h>

/* Starlink includes */
#include "sae_par.h"
#include "ast.h"
#include "mers.h"
#include "msg_par.h"
#include "prm_par.h"
#include "star/thr.h"

/* SMURF includes */
#include "smf.h"
#include "smurf_par.h"
#include "smurf_typ.h"
#include "libsmf/smf_err.h"


/* Local data types. */
typedef struct CGEN_FUNCTION(smfDownSamp1Data) {
   const void *in;
   dim_t instride;
   int inbytestride;
   dim_t inlen;
   void *out;
   dim_t outstride;
   int outbytestride;
   dim_t outlen;
   int todouble;
   int init;
   int isang ;
} CGEN_FUNCTION(smfDownSamp1Data);

/* Prototypes for local functions. */
static void CGEN_FUNCTION(smf1_calldownsamp1)( void *job_data, int *status );
static void CGEN_FUNCTION(smf1_downsamp1)( const CGEN_TYPE *in, dim_t instride,
                                          int inbytestride, dim_t inlen,
                                          void *out, dim_t outstride,
                                          int outbytestride, dim_t outlen,
                                          int todouble, int init, int isang,
                                          int *status );




/* A couple of macros to simplify our pointer math. Since we're using
   a base pointer with offset indices multiplied by strides in bytes
   we need to do a bunch of typecasting that can make the code hard to
   read. PTROFF returns a CGEN_TYPE* pointer to the byte at base +
   offset*stride. PTROFFD is the same except casting the return
   pointer as as double*. */

#define CPTROFF(base,offset,stride) ((const CGEN_TYPE *) (((const char *) base) + (offset)*(stride)))
#define CPTROFFD(base,offset,stride) ((const double *) (((const char *) base) + (offset)*(stride)))
#define PTROFF(base,offset,stride) ((CGEN_TYPE *) (((char *) base) + (offset)*(stride)))
#define PTROFFD(base,offset,stride) ((double *) (((char *) base) + (offset)*(stride)))


/* Simple default string for errRep */
#define FUNC_NAME "smf_downsamp1"

void CGEN_FUNCTION(smf_downsamp1)( ThrWorkForce *wf, const CGEN_TYPE *in,
                                   dim_t instride, int inbytestride,
                                   dim_t inlen, void *out, dim_t outstride,
                                   int outbytestride, dim_t outlen,
                                   int todouble, int init, int isang,
                                   int *status ) {

/* Check inherited status */
   if( *status != SAI__OK ) return;

/* If a workforce has been supplied, allocate memory to hold the job
   data, store the supplied arguments in the job data, and then submit a
   job to the workforce. Use the THR__FREE_JOBDATA flag to Ensure the
   memory holding the job data is freed automatically when the job is
   complete. */
   if( wf ) {
      CGEN_FUNCTION(smfDownSamp1Data) *pdata = astMalloc( sizeof( *pdata ) );
      if( *status == SAI__OK ) {
         pdata->in = in;
         pdata->instride = instride;
         pdata->inbytestride = inbytestride;
         pdata->inlen = inlen;
         pdata->out = out;
         pdata->outstride = outstride;
         pdata->outbytestride = outbytestride;
         pdata->outlen = outlen;
         pdata->todouble = todouble;
         pdata->init = init;
         pdata->isang = isang;

         thrAddJob( wf, THR__FREE_JOBDATA, pdata,
                    CGEN_FUNCTION(smf1_calldownsamp1), 0, NULL, status );
      }

/* If no workforce has been supplied, just execute the job in the current
   thread directly. */
   } else {
      CGEN_FUNCTION(smf1_downsamp1)( in, instride, inbytestride, inlen, out,
                                     outstride, outbytestride, outlen,
                                     todouble, init, isang, status );
   }

}



/* This function is invoked by the Thr thread manager. It extracts the
   job data from the supplied structure and calls smf1_downsamp1 to do the
   work in the current thread. */
static void CGEN_FUNCTION(smf1_calldownsamp1)( void *job_data, int *status ) {
   if( *status != SAI__OK ) return;
   CGEN_FUNCTION(smfDownSamp1Data) *pdata = job_data;
   CGEN_FUNCTION(smf1_downsamp1)( (const CGEN_TYPE *) pdata->in,
                                  pdata->instride, pdata->inbytestride,
                                  pdata->inlen, pdata->out, pdata->outstride,
                                  pdata->outbytestride, pdata->outlen,
                                  pdata->todouble, pdata->init, pdata->isang,
                                  status );
}



/* This function does the actual downsampling, in the current thread. */
static void CGEN_FUNCTION(smf1_downsamp1)( const CGEN_TYPE *in, dim_t instride,
                                          int inbytestride, dim_t inlen,
                                          void *out, dim_t outstride,
                                          int outbytestride, dim_t outlen,
                                          int todouble, int init, int isang,
                                          int *status ) {

  /* Local variables */
  dim_t i;                    /* High-res index */
  dim_t ibstride;             /* input strides in bytes */
  double j1;                  /* Fractional low-res index lower edge */
  double j2;                  /* Fractional high-res index lower edge */
  dim_t jf1;                  /* low-res index lower edge */
  dim_t jf2;                  /* high-res index lower edge */
  const CGEN_TYPE *pi=NULL;   /* pointer to current input value */
  CGEN_TYPE *po=NULL;         /* pointer to current output value */
  double *pod=NULL;           /* pointer to current double output value */
  dim_t obstride;             /* output strides in bytes */
  CGEN_TYPE *outbuf=NULL;     /* output same type as the input */
  double *outbufd=NULL;       /* double precision output */
  double s;                   /* current sample */
  double s1;                  /* part of s that goes at location jf1 */
  double s2;                  /* part of s that goes at location jf2 */
  double step;                /* Number of low-res samples per high-res samp */
  CGEN_TYPE val;              /* current value from in */
  CGEN_TYPE prevval;          /* Previous value of val */
  int gotstep = 0;            /* Corrected a 0 to 360 step */

  /* Check status */
  if (*status != SAI__OK) return;

  if( !in || !instride || !inlen || !out || !outstride || !outlen ) {
    *status = SAI__ERROR;
    errRep( "", FUNC_NAME ": invalid input supplied", status );
    return;
  }

  if( outlen > inlen ) {
    *status = SAI__ERROR;
    errRep( "", FUNC_NAME ": outlen must be shorter than inlen to downsample!",
            status );
    return;
  }

  /* Output same as input or double precision? */
  if( todouble ) {
    outbufd = out;
  } else {
    outbuf = out;
  }

  /* Calculate step size */
  step = (double) outlen / (double) inlen;

  /* Sort out input buffer byte strides */
  if( inbytestride ) {
    ibstride = instride;
  } else {
    ibstride = instride*sizeof(*in);
  }



  if( outbuf ) {
  /* **************************************************************************
     In this first version the output has the same type as the input
     *************************************************************************/

    /* Sort out output buffer byte strides and initialize to 0 */
    if( outbytestride ) {
      obstride = outstride;
    } else {
      obstride = outstride*sizeof(*outbuf);
    }

    if( init ) {
      for( i=0; i<outlen; i++ ) {
        po = PTROFF(outbuf,i,obstride);
        *po = 0;
      }
    }

    /* The first high-res sample definately goes into the first low-res
       sample, and the last high-res sample definately goes into the last
       low-res sample */

    outbuf[0] = in[0];
    prevval = in[0];

    /*outbuf[(outlen-1)*outstride] += in[(inlen-1)*instride];*/

    po = PTROFF(outbuf,outlen-1,obstride);
    pi = CPTROFF(in,inlen-1,ibstride);

    if( *pi == CGEN_BAD ) {
      *po = CGEN_BAD;
    } else {
      *po += *pi;
    }

    /* loop over remaining high-res samples and add them to the
       appropriate low-res output samples */
    j1 = step;
    for( i=1; i<(inlen-1); i++ ) {

      /* Update upper edge */
      j2 = j1 + step;

      /* integer indices */
      jf1 = floor(j1);
      jf2 = floor(j2);

      /* val = in[i*instride]; */
      pi = CPTROFF(in,i,ibstride);
      val = *pi;

      if( val == CGEN_BAD ) {
        /* If this input value is bad, propagate to output buffer */

        /* outbuf[jf1*outstride] = CGEN_BAD;
           outbuf[jf2*outstride] = CGEN_BAD; */

        po = PTROFF(outbuf,jf1,obstride);
        *po = CGEN_BAD;

        po = PTROFF(outbuf,jf2,obstride);
        *po = CGEN_BAD;

      } else {

        if (isang && fabs((double)val-prevval) > M_PI) {
          gotstep = 1;
          if (val-prevval > 0) {
            val -= ERFA_D2PI;
          } else {
            val += ERFA_D2PI;
          }
          prevval = val;
        }

        s = (double) val;

        if( jf1 == jf2 ) {
          /* If same integer indices, this entire high-res sample goes in one
             low-res sample */

          /* outbuf[jf1*outstride] += s; */

          po = PTROFF(outbuf,jf1,obstride);
          *po += s;

        } else {
          /* if not the same integer index, need to split the sample between two
             bins */
          s1 = (jf2 - j1)*s/step;  /* portion of s in jf1 */
          s2 = s - s1;             /* portion of s in jf2 */

          /* outbuf[jf1*outstride] += (CGEN_TYPE) s1;
             outbuf[jf2*outstride] += (CGEN_TYPE) s2; */

          po = PTROFF(outbuf,jf1,obstride);
          *po += s1;

          po = PTROFF(outbuf,jf2,obstride);
          *po += s2;
        }
      }

      /* Update lower edge */
      j1 = j2;
    }

    /* If the penultimate input value has a jump compared
       to the final measurement we need to correct the final
       measurement by 2 pi */
    if (isang) {
      pi = CPTROFF(in,inlen-1,ibstride);

      if( *pi != CGEN_BAD ) {
        po = PTROFF(outbuf,outlen-1,obstride);
        val = *pi;
        if (fabs((double)val-prevval) > M_PI) {
          gotstep = 1;
          if (val-prevval > 0) {
            *po -= ERFA_D2PI;
          } else {
            *po += ERFA_D2PI;
          }
        }
      }
    }


    /* Normalize the output */
    for( i=0; i<outlen; i++ ) {
      po = PTROFF(outbuf,i,obstride);

      if( *po != CGEN_BAD ) {
        *po *= step;
        if (gotstep && isang && *po < 0.0) *po += ERFA_D2PI;
      }
    }





  } else {
  /* **************************************************************************
     In this one the output is double
     *************************************************************************/

    /* Sort out output buffer byte strides and initialize to 0 */
    if( outbytestride ) {
      obstride = outstride;
    } else {
      obstride = outstride*sizeof(*outbufd);
    }

    if( init ) {
      for( i=0; i<outlen; i++ ) {
        pod = PTROFFD(outbufd,i,obstride);
        *pod = 0;
      }
    }

    outbufd[0] = in[0];
    prevval = in[0];

    /*outbufd[(outlen-1)*outstride] += in[(inlen-1)*instride];*/

    pod = PTROFFD(outbufd,outlen-1,obstride);
    pi = CPTROFF(in,inlen-1,ibstride);

    if( *pi == CGEN_BAD ) {
      *pod = VAL__BADD;
    } else {
      *pod += *pi;
    }

    j1 = step;
    for( i=1; i<(inlen-1); i++ ) {

      /* Update upper edge */
      j2 = j1 + step;

      /* integer indices */
      jf1 = floor(j1);
      jf2 = floor(j2);

      /*val = in[i*instride];*/
      pi = CPTROFF(in,i,ibstride);
      val = *pi;

      if( val == CGEN_BAD ) {
        /* If this input value is bad, propagate to output buffer */

        /* outbufd[jf1*outstride] = VAL__BADD;
           outbufd[jf2*outstride] = VAL__BADD; */

        pod = PTROFFD(outbufd,jf1,obstride);
        *pod = VAL__BADD;

        pod = PTROFFD(outbufd,jf2,obstride);
        *pod = VAL__BADD;

      } else {

        if (isang && fabs((double)val-prevval) > M_PI) {
          gotstep = 1;
          if (val-prevval > 0) {
            val -= ERFA_D2PI;
          } else {
            val += ERFA_D2PI;
          }
          prevval = val;
        }

        s = (double) val;

        if( jf1 == jf2 ) {
          /* If same integer indices, this entire high-res sample goes in one
             low-res sample */

          /* outbufd[jf1*outstride] += s; */

          pod = PTROFFD(outbufd,jf1,obstride);
          *pod += s;

        } else {
          /* if not the same integer index, need to split the sample between two
             bins */
          s1 = (jf2 - j1)*s/step;  /* portion of s in jf1 */
          s2 = s - s1;             /* portion of s in jf2 */

          /* outbufd[jf1*outstride] += s1;
             outbufd[jf2*outstride] += s2; */

          pod = PTROFFD(outbufd,jf1,obstride);
          *pod += s1;

          pod = PTROFFD(outbufd,jf2,obstride);
          *pod += s2;

        }
      }

      pod = PTROFFD(outbufd,jf1,obstride);

      /* Update lower edge */
      j1 = j2;
    }

    /* If the penultimate input value has a jump compared
       to the final measurement we need to correct the final
       measurement by 2 pi */
    if (isang) {
      pi = CPTROFF(in,inlen-1,ibstride);
      if( *pi != CGEN_BAD ) {
        pod = PTROFFD(outbufd,outlen-1,obstride);
        val = (double)*pi;
        if (fabs((double)val-prevval) > M_PI) {
          gotstep = 1;
          if (val-prevval > 0) {
            *pod -= ERFA_D2PI;
          } else {
            *pod += ERFA_D2PI;
          }
        }
      }
    }

    /* Normalize the output */
    for( i=0; i<outlen; i++ ) {
      pod = PTROFFD(outbufd,i,obstride);

      if( *pod != VAL__BADD ) {
        *pod *= step;
        if (gotstep && isang && *pod < 0.0) {
          *pod += ERFA_D2PI;
        }
      }
    }
  }

}




