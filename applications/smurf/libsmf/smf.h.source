/*  -*- C -*-
 *+
 *  Name:
 *     smf.h

 *  Purpose:
 *     Prototypes for the libsmf library

 *  Language:
 *     Starlink ANSI C

 *  Type of Module:
 *     Header File

 *  Invocation:
 *     #include "smf.h"

 *  Description:
 *     Prototypes used by the libsmf functions.

 *  Authors:
 *     Andy Gibb (UBC)
 *     Tim Jenness (JAC, Hawaii)
 *     Edward Chapin (UBC)
 *     Malcolm J. Currie (Starlink)
 *     Coskun Oba (COBA, UoL)
 *     Remo Tilanus (JAC, Hawaii)
 *     Matt Sherwood (MS, UoL)
 *     {enter_new_authors_here}

 *  History:
 *     2005-09-27 (AGG):
 *        Initial test version
 *     2005-11-04 (AGG):
 *        Add smf_open_file, smf_fits_rdhead and smf_fits_crchan
 *     2005-11-07 (TIMJ):
 *        Alphabetize.
 *        Add smf_tslice_ast, add smf_fits_getI
 *     2005-11-28 (TIMJ):
 *        Add smf_close_file
 *     2005-12-05 (AGG)
 *        Add smf_flatfield and smf_check_flat
 *     2005-12-06 (AGG)
 *        Add smf_flatten
 *     2005-12-09 (AGG)
 *        Add smf_clone_data
 *     2006-01-09 (AGG)
 *        Add smf_tslice and smf_insert_tslice
 *     2006-01-10 (AGG)
 *        Add smf_scale_tau and smf_fits_getF
 *     2006-01-24 (TIMJ):
 *        Add smf_fits_getS
 *     2006-01-24 (AGG):
 *        Change floats to doubles in smf_correction_extintion, smf_scale_tau
 *     2006-01-25 (AGG):
 *        Add smf_dtype_check_fatal
 *     2006-01-25 (TIMJ):
 *        Add smf_malloc, smf_free.
 *        Remove smf_fits_rdhead
 *     2006-01-25 (TIMJ):
 *        Add smf_create_*
 *        Add smf_construct_*
 *        Add smf_dtype_tostring
 *     2006-01-27 (TIMJ):
 *        Change API for smf_construct_smfFile, smf_construct_smfDA
 *        and smf_construct_smfHead.
 *     2006-02-02 (EC):
 *        Add smf_mapbounds
 *        Add smf_rebinmap
 *     2006-02-03 (AGG):
 *        Change API for smf_scale_tau, smf_correct_extinction
 *     2006-02-17 (AGG):
 *        Add smf_subtract_poly
 *     2006-02-24 (AGG):
 *        Add smf_subtract_plane
 *     2006-03-23 (AGG):
 *        Update API for smf_rebinmap, smf_construct_smfData,
 *        smf_construct_smfHead
 *        Add smf_mapbounds approx, smf_deepcopy_smfHead & smf_deepcopy_smfData
 *     2006-03-28 (AGG):
 *        Update API for smf_deepcopy_smfData, add smf_deepcopy_smfDA
 *     2006-03-30 (AGG):
 *        Add smf_deepcopy_smfFile
 *     2006-04-05 (AGG):
 *        - Change API for smf_deepcopy_smfDA to accept a smfData
 *          rather than smfDA
 *        - Add smf_check_smfData, smf_check_smfDA, smf_check_smfFile and
 *          smf_check_smfHead
 *     2006-04-21 (AGG):
 *        - Change API for smf_check_smfData, smf_deepcopy_smfData
 *        - Add history to smf_construct_smfData
 *        - Add smf_history_add, smf_history_read
 *     2006-05-01 (EC):
 *        - Add smf_mapcoordinates
 *     2006-05-09 (AGG):
 *        Add smf_get_xloc and smf_get_ndfid
 *     2006-05-09 (EC):
 *        Renamed smf_mapcoord to smf_calc_mapcoord
 *     2006-07-07 (AGG):
 *        Add smf_grp_related, smf_construct_smfGroup,
 *        smf_open_related, smf_close_related and smf_close_smfGroup
 *     2006-07-11 (EC):
 *        Add smf_model_create, smf_model_getname
 *     2006-07-26 (TIMJ):
 *        Replace sc2head with JCMTState.
 *     2006-07-28 (TIMJ):
 *        Add tswcs argument to smf_construct_smfHead
 *     2006-07-31 (TIMJ):
 *        Add smf_inst_get
 *     2006-08-02 (AGG):
 *        Add smf_open_newfile and smf_open_ndf
 *     2006-08-02 (TIMJ):
 *        smf_open_newfile should take dim_t
 *     2006-08-16 (EC):
 *        changed interface for smf_model_getname
 *     2006-09-06 (EC):
 *        added smf_calc_telpos, smf_create_lutwcs and smf_telpos_get
 *     2006-09-15 (AGG):
 *        Added smf_dreamsolve, smf_create_smfDream,
 *        smf_construct_smfDream, smf_close_smfDream, smd_dream_setjig,
 *        smf_store_image
 *     2006-09-15 (AGG):
 *        Add smf_dream_getgrid, smf_dream_calcweights
 *     2006-10-11 (AGG):
 *        Update API for smf_open_newfile
 *     2006-10-13 (JB):
 *        Add smf_bbrebinmap
 *     2006-10-26 (AGG):
 *        Add smf_average_data, smf_calc_stareimage, update API to
 *        smf_store_image
 *     2006-11-2 (DSB):
 *        Add smf_geod.
 *     2006-11-3 (DSB):
 *        Add smf_instap_get.
 *     2006-11-20 (DSB):
 *        Add smf_cubegrid and change smf_cubebounds.
 *     2006-11-30 (DSB):
 *        Add smf_sparsebounds.
 *     2007-01-19 (AGG):
 *        - Change API to smf_mapbounds: now returns the moving flag
 *        - Change API to smf_rebinmap: takes the moving flag as an argument
 *     2007-01-30 (AGG):
 *        Update API to smf_mapbounds_approx to return moving flag
 *     2007-02-06 (AGG):
 *        Add tsys to smf_construct_smfHead
 *     2007-02-12 (EC):
 *        Add smf_model_getptr
 *     2007-02-12 (DSB):
 *        Add "hasoffexp" argument to smf_cubebounds.c
 *     2007-02-23 (AGG):
 *        Add instap to smf_construct_smfHead.c
 *     2007-03-05 (EC):
 *        Changed smf_correct_extinction interface
 *        Add smf_model_gettype
 *        Add smf_calcmodel_ext
 *     2007-03-20 (TIMJ):
 *        Add smf_fits_outhdr
 *     2007-04-14 (DSB):
 *        Add "int *nreject" to smf_rebincube.
 *     2007-04-23 (DSB):
 *        Big changes to smf_rebincube_xxx functions.
 *     2007-04-23 (EC):
 *        Add smf_terr
 *     2007-06-13 (EC):
 *        Add smf_open_file and smf_dtype_sz.c
 *     2007-06-13 (EC):
 *        Add smf_model_NDFexport
 *     2007-06-22 (TIMJ):
 *        Add string arg to smf_fits_add_prov
 *     2007-07-05 (TIMJ):
 *        Add smf_accumulate_prov.
 *     2007-07-10 (EC):
 *        -Add smf_open_related_model
 *        -changed interface for smf_create_smfArray
 *        -changed interface for smf_model_create
 *        -changed interface for smf_calcmodel_*
 *        -changed return value of smf_calcmodelptr
 *     2007-07-12 (EC):
 *        -Added moving to smf_bbrebinmap and smf_calc_mapcoord
 *        -Changed name of smf_rebincube_totmap to smf_rebin_totmap
 *     2007-07-16 (EC):
 *        -Added copysubgroups to smf_construct_smfGroup
 *     2007-08-09 (EC):
 *        -Changed interface for smf_model_create
 *     2007-08-17 (EC):
 *        -Added nofile to smf_model_create interface
 *     2007-09-13 (EC):
 *        -Added smf_dataOrder
 *     2007-09-13 (EC):
 *        -Added smf_fft_filter and smf_concat_smfGroup
 *     2007-10-12 (DSB):
 *        -Added smf_choosepolbins, smf_freepolbins and smf_polext.
 *     2007-10-19 (DSB):
 *        -Added specunion to smf_cubebounds.
 *     2007-10-25 (DSB):
 *        -Added smf_checkdets.
 *     2007-10-31 (EC):
 *        -Added mode to smf_open_mapcoord interface
 *     2007-11-8 (DSB):
 *        -Added smf_sortd and smf_reorder<x>.
 *     2007-11-15 (EC):
 *        -Added projection information to interfaces of
 *         smf_iteratemap and smf_concat_smfGroup
 *        -Added iarray to smf_model_create interface
 *     2007-11-23 (DSB):
 *        Added smf_updateprov.
 *     2007-11-26 (DSB):
 *        Added wcsout to smf_choosetiles argument list.
 *     2007-11-27 (EC):
 *        Added smf_fits_getL, smf_fits_setL
 *     2007-12-054 (DSB):
 *        Added trim to smf_choosetiles argument list.
 *     2007-12-14 (EC):
 *        Added flags to smf_calc_mapcoord interface.
 *     2007-12-18 (DSB):
 *        -Added smf_getrefwcs.
 *        -Added specrefwcs and spacerefwcs to smf_cubebounds.
 *     2007-12-18 (AGG):
 *        New smf_free behaviour: now returns a NULL pointer if successful
 *     2008-1-14 (DSB):
 *        Added argument "border" to smf_choosetiles, and "trim" to
 *        smf_reshapendf.
 *     2008-1-15 (DSB):
 *        Remove argument "trim" from smf_reshapendf.
 *     2008-1-17 (DSB):
 *        Added argument "alignsys" to smf_cubegrid.
 *     2008-1-21 (DSB):
 *        Added argument "polobs" to smf_cubebounds and smf_sparsebounds.
 *     2008-01-22 (EC):
 *        Added hitsmap to smf_simplerebinmap, smf_iteratemap
 *     2008-01-25 (EC):
 *        Added map projection information to smf_model_create interface
 *     2008-2-1 (DSB):
 *        Added smf_resampcube* functions.
 *     2008-2-8 (EC):
 *        Added smf_update_quality
 *     2008-2-12 (DSB):
 *        Changed interface to smf_choosepolbins, smf_rebincube*, and
 *        smf_rebinsparse.
 *     2008-02-12 (AGG):
 *        Update API to smf_rebinmap, deprecate smf_bbrebinmap
 *     2008-02-13 (AGG):
 *        - smf_rebinmap: add parameters for pixel spreading scheme
 *        - smf_get_spread: new routine to get parameters for chosen
 *          pixel-spreading scheme
 *     2008-02-26 (AGG):
 *        Add rel parameter to smf_subtract_poly to get subtraction
 *        relative to first time slice
 *     2008-03-03 (EC):
 *        Added target to smf_update_quality interface
 *     2008-03-04 (EC):
 *        Updated smf_calcmodel* routines to use smfDIMMData
 *     2008-03-10 (AGG):
 *        Add smf_create_qualname
 *     2008-03-12 (EC):
 *        - Updated smf_update_quality interface
 *        - Added smf_correct_steps / smf_simple_stats
 *     2008-03-14 (DSB):
 *        - Added smf_sorti, smf_ext2km and smf_km2ext.
 *     2008-03-25 (EC):
 *        - Added syncbad to smf_update_quality interface
 *     2008-03-27 (DSB):
 *        - Added smf_getobsidss.
 *     2008-03-28 (DSB):
 *        - Added smf_calc_telres.
 *     2008-03-31 (JB):
 *        - Added smf_get_moltrans.
 *     2008-03-31 (EC):
 *        - Added smf_quick_noise
 *     2008-04-02 (EC):
 *        - Added smf_flag_spikes
 *     2008-04-03 (EC):
 *        - Added QUALITY to smf_simplerebinmap
 *        - Added QUALITY to smf_scanfit, smf_fit_poly, smf_subtract_poly,
 *     2008-04-09 (TIMJ):
 *        fix smf_created_qualname.
 *        smf_create_lutwcs and smf_detpos_wcs no longer needs steptime argument
 *     2008-04-14 (EC):
 *        - Updated interface for smf_flag_spikes and smf_boxcar1
 *     2008-04-16 (EC):
 *        - Added optional external QUALITY and VARIANCE to smf_model_NDFexport
 *        - Added chunk to smf_construct_smfGroup
 *        - Added smf_simpleaddmap
 *     2008-04-16 (AGG):
 *        Add genvar to smf_rebinmap
 *     2008-04-17 (EC):
 *        Modified smf_grp_related interface
 *     2008-04-18 (EC):
 *        Modified smf_flag_spikes interface
 *     2008-04-23 (EC):
 *        -Added sampvar to smf_simplerebinmap
 *        -Added hdr to smf_model_NDFexport
 *     2008-04-24 (EC):
 *        -Added smf_check_mapsize (then renamed smf_checkmem_map)
 *        -Added maxmem to smf_iteratemap
 *     2008-04-28 (AGG):
 *        Add meansky parameter to smf_subtract_plane1/2
 *     2008-04-28 (EC):
 *        -Added maxconcatlen to smf_grp_related interface
 *        -Added smf_checkmem_dimm
 *     2008-04-28 (AGG):
 *        Add smf_dump_smfData
 *     2008-04-30 (TIMJ):
 *        Add _clabels routines.
 *     2008-05-01 (TIMJ):
 *        Add check_units
 *     2008-05-14 (EC):
 *        -Added smf_get_projpar
 *        -Modified smf_mapbounds interface to use par
 *        -Moved NINT macro here from smf_cubegrid
 *     2008-05-23 (TIMJ):
 *        Add smf_get_taskname
 *     2008-05-26 (EC):
 *        Added is2d to smf_choosetiles
 *     2008-05-28 (TIMJ):
 *        Change smf_accumulate_prov
 *     2008-06-03 (TIMJ):
 *        Add smf_display_projpars
 *     2008-06-04 (TIMJ):
 *        smf_get_projpar new API.
 *        Add smf_calc_skyframe
 *     2008-06-05 (EC):
 *        Removed is2d from smf_choosetiles
 *     2008-06-06 (EC):
 *        -Renamed smf_fft_filter to smf_filter_execute and changed interface
 *        -Added smf_create_smfFilter, smf_filter_ident, smf_free_smfFilter
 *     2008-06-10 (EC):
 *        -Added smf_filter_r2c
 *     2008-06-11 (EC):
 *        -Added smf_filter_edge and smf_filter_notch
 *        -Renamed smf_model_NDFexport to smf_NDFexport
 *     2008-06-24 (EC):
 *        Added padStart & padEnd to smf_concat_smfGroup
 *     2008-07-03 (EC):
 *        Switched to using dim_t in a number of function interfaces:
 *        smf_calc_stats, smf_construct_smfGroup, smf_model_create,
 *        smf_open_related, smf_simplerebinmap, smf_open_related_model,
 *        smf_simpleaddmap
 *     2008-07-30 (EC):
 *        Add smf_grpCopy
 *     2008-08-27 (AGG):
 *        Add smf_set_moving
 *     2008-08-27 (EC):
 *        -Rename smf_simple_stats, smf_simplerebinmap, smf_simpleaddmap
 *         to     smf_stats1, smf_rebinmap1, smf_addmap1
 *        -Add smf_get_dims
 *     2008-08-28 (EC):
 *        -Renamed to smf.h.source in line with using cgeneric macros
 *     2009-03-12 (EC):
 *        -Added smf_calcmodel_flt
 *     2009-03-27 (TIMJ):
 *        Add smf_create_respfile
 *     2009-04-15 (DSB):
 *        Added smf_check_detpos.
 *     2009-04-15 (EC):
 *        Add smf_get_cleanpar
 *     2009-04-17 (EC):
 *        Add smf_filter_fromkeymap
 *     2009-04-23 (EC):
 *        Add smf_copytime, smf_timerinit, timerupdate
 *     2009-04-28 (EC):
 *        Alphabetize and reformat to fit in 80 columns
 *     2009-08-06 (EC):
 *        Add smf_map_spikes
 *     2009-08-25 (MJC):
 *        Add star/irq.h include as it is no longer in star/kaplibs.h.
 *     2009-09-29 (EC):
 *        Add smf_get_extpar
 *     2009-11-17 (EC):
 *        Add smf_get_goodrange
 *     2010-03-18 (EC):
 *        Add smf_qual_str, smf_qualstats_report
 *     2010-05-26 (TIMJ):
 *        Remove SMURF memory allocation routine prototypes. Use AST
 *        routines natively. Provide debugging fallback using standard
 *        routines.
 *     2010-08-13 (EC):
 *        Add smf_write_itermap
 *     2010-08-20 (EC):
 *        Add smf_write_bolomap, smf_write_shortmap
 *     2010-08-31 (EC):
 *        Add smf_dataOrder_array
 *     2010-09-15 (DSB):
 *        Remove  smf_flag_spikes.
 *     2010-09-17 (COBA):
 *        - Add smf_create_smfFts
 *        - Add smf_construct_smfFts
 *        - Add smf_deepcopy_smfFts
 *        - Update smf_construct_smfData
 *     2010-09-23 (EC):
 *        - Rename smf_flag_stationary to smf_flag_slewspeed
 *        - add smf_filter_complement
 *     2010-09-27 (EC):
 *        Add smf_write_flagmap
 *     2010-10-12 (EC):
 *        Add smf_whiten
 *     2010-10-18 (COBA):
 *        Add smf_check_smfFts
 *     2010-10-20 (EC):
 *        Add smf_downsamp_smfData
 *     2010-10-06 (RPT)
 *        Added smf_dataOrder_ndims.c
 *     2010-10-05 (RPT)
 *        Added smf_fit_profile and smf_lsqfit
 *     2010-10-19 (RPT)
 *        Added smf_gauest.c
 *     2011-02-02 (RPT)
 *        Added smf_math_functions, smf_math_fvalue, smf_math_fpderv,
 *              smf_math_fnpar
 *     2011-02-16 (RPT)
 *        Added smf_dtype_arraycopy
 *     2011-06-08 (EC)
 *        Add smf_raw2current.c
 *     2011-10-06 (EC)
 *        Add smf_fit_pspec
 *     2012-07-19 (RPT)
 *        Extract smf_math_cmplxerrfunc from smf_math_functions as separate
 *              routine
 *     2013-07-31 (MS)
 *        Add smf_fit_poly1d_chisq
 *     2015-02-20 (MS)
 *       Added new smfFts fields for quality statistics
 *     2017-01-10 (GSB)
 *       Add "dtai" argument to some functions.
 *     2022-10-08 (GSB)
 *       Converted smf_get_global0I and smf_put_global0I to generic functions.
 *     {enter_further_changes_here}

 *  Copyright:
 *     Copyright (C) 2005-2007 Particle Physics and Astronomy Research Council.
 *     Copyright (C) 2007-2009 Science and Technology Facilities Council.
 *     Copyright (C) 2005-2010 University of British Columbia.
 *     Copyright (C) 2015-2017 East Asian Observatory.
 *     All Rights Reserved.

 *  Licence:
 *     This program is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU General Public License as
 *     published by the Free Software Foundation; either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be
 *     useful, but WITHOUT ANY WARRANTY; without even the implied
 *     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 *     PURPOSE. See the GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public
 *     License along with this program; if not, write to the Free
 *     Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 *     MA 02110-1301, USA

 *  Bugs:
 *     {note_any_bugs_here}
 *-
 */

#ifndef SMF_DEFINED
#define SMF_DEFINED

#include <sys/time.h>    /* for struct timeval */
#include <stdint.h>      /* for int64_t */

#include "ast.h"
#include "star/thr.h"
#include "jcmt/state.h"  /* for inst_t */
#include "smurf_typ.h"
#include "smurf_par.h"
#include "star/grp.h"
#include "star/ndg.h"
#include "smf_typ.h"
#include "msg_par.h"
#include "star/irq.h"
#include "star/kaplibs.h"
#include "sc2da/sc2ast_typ.h"

/* Handle GCC __attribute__ */
#ifndef __GNUC__
#  define  __attribute__(x)  /*NOTHING*/
#endif

/* Returns nearest integer to "x" */
#define NINT(x) ( ( (x) > 0 ) ? (int)( (x) + 0.5 ) : (int)( (x) - 0.5 ) )

/* Evaluates a polynomial at coordinate "x" and stores the result in "result".
   coeffs is an array of size order+1 */
#define EVALPOLY( result, x, order, coeffs ) { \
  dim_t _j; \
  double _temp; \
  double _xx = x; \
  _temp = coeffs[0]; \
  if (_temp != VAL__BADD) { \
    for ( _j = 1; _j <= order; _j++ ) { \
      _temp += coeffs[_j] * pow( _xx, _j ); \
    } \
  } \
  result = _temp; \
}

/* Macro to convert a pixel index in an FFT to a frequency index: if there
   are N samples in real space, the indices up to N/2+1 in frequency space
   are unique, and then the remaining samples are the complex conjugate of
   the first half (negative frequencies). Since the return value can be
   negative we type cast everything as a signed int. thanks GM */

#define FFT_INDEX_TO_FREQ(index,N) \
  ((((int)index + ((int)N-1)/2) % (int)N) - ((int)N-1)/2)

/* These macros can be enabled to replace the AST malloc routines with
   system default routines. This can sometimes help debuggers and tools
   like valgrind. The AST malloc routine can get in the way as it uses
   local caching. Note that we ignore the "init" parameter for astCalloc
   and always force initialisation in this simplified macro.

   Make sure that no SMURF routines include ast.h after including smf.h
*/

#define MALLOC_DEBUG 0
#if MALLOC_DEBUG

#undef astMalloc
#undef astFree
#undef astCalloc
#undef astRealloc
#undef astGrow
#undef astStore

#define astMalloc(size)  malloc(size)
#define astCalloc(nmemb, size, init) calloc(nmemb, size)
#define astRealloc(ptr, size) realloc(ptr, size)
#define astGrow( ptr, n, size ) realloc(ptr, n*size)

/* The prototype differs for system free(). This will trigger a "defined but not used"
   warning when compiling in any routine that does not use smf_free but that can be
   ignored since this is only for debugging. */
#define astFree(ptr) debug_astFree(ptr)
static inline void * debug_astFree( void * ptr );
static inline void * debug_astFree( void * ptr ) { if (ptr) free(ptr); return NULL; }

/* astStore is realloc+memcpy */
#define astStore( ptr, data, size ) debug_astStore( ptr, data, size )

static inline void * debug_astStore( void * ptr, const void * data, dim_t size );
static inline void * debug_astStore( void * ptr, const void * data, dim_t size ) {
  ptr = realloc( ptr, size );
  if (ptr) memcpy( ptr, data, size );
  return ptr;
}

#endif


/* External variable delcarations */

/* An AST KeyMap used to pass global parameters around all SMURF
   routines. Created in smurf_mon.c */
extern AstKeyMap *smurf_global_keymap;



/* Function Prototypes */

void smf_accumulate_prov( const smfData * data, const Grp* igrp, dim_t index,
                          int ondf, const char *creator,
                          NdgProvenance ** modprov, int * status );

void smf_addfakemap(  ThrWorkForce *wf, smfArray *res, smfArray *ext,
                      smfArray *lut, dim_t *lbnd_out, dim_t *ubnd_out,
                      AstKeyMap *keymap, double chunkfactor, dim_t contchunk,
                      int *status );

void smf_add_grp_metadata( Grp *grp, const char *name, const char *value,
                           int *status );

void smf_add_smu_pcorr( JCMTState *state, int isazel, double dlon,
                        double dlat, int *status);

void smf_add_spectral_axis( int indf, AstFitsChan *fc, int *status );

void smf_addinst( ThrWorkForce *wf, smfData *data, const double *inst,
                  double *values, int *status );

void smf_addmap1( dim_t contchunk, double *map1, double *mapweight1, double *boloweight1,
                  int *hitsmap1, double *mapvar1, smf_qual_t *mapqual1,
                  double *map2, double *boloweight2,
                  int *hitsmap2, double *mapvar2, smf_qual_t *mapqual2,
                  dim_t msize, double chunkweight2, int *status );

void smf_addcom( ThrWorkForce *wf, smfData *data, const double *com,
                 double comval, int *status );

void smf_addgai( ThrWorkForce *wf, smfData *data, const double *gai,
                 int *status );

void smf_addpolanal( AstFrameSet *fset, smfHead *hdr, AstKeyMap *config,
                     int *status );

void smf_addto_smfArray( smfArray *ary, smfData *data, int *status );

double *smf_alignndf( int indf, AstFrameSet *outfset, dim_t *lbnd_out,
                      dim_t *ubnd_out, int *status );

void smf_apodize( smfData *data, dim_t len, int forward, int *status );

int smf_apply_dark( smfData *indata, const smfArray *darks,
                     int *status);

void smf_apply_mask( ThrWorkForce *wf, smfData *indata,
                     const smfArray *bpms, smf_bbm_meth method,
                     smf_qual_t addqual, int *status );

dim_t smf_block_end( smfData *data, dim_t *block_start,
                   float arcerror, dim_t maxsize, int *status );

void smf_bolonoise( ThrWorkForce *wf, smfData *data, double gfrac,
                    dim_t window, double f_low,
                    double f_white1, double f_white2,
                    int nep, dim_t len, double *whitenoise, double *fratio,
                    smfData **fftpow,int *status );

double smf_calc_covar( const smfData *data, dim_t i, dim_t j,
                       dim_t lo, dim_t hi, int *status);

void smf_calc_taufit( const smfData * data, smf_tausrc tausrc,
                      AstKeyMap* extpars, double **tau,
                      dim_t *nframes, int *status );

double smf_calc_fcon( smfData *data, dim_t nchan, int report,
                      AstMapping **specmap, AstFrame **specframe,
                      int *status );

void smf_calc_mapcoord( ThrWorkForce *wf, AstKeyMap *config, smfData *data,
                        AstFrameSet *outfset, int moving, dim_t *lbnd_out,
                        dim_t *ubnd_out, fts2Port fts_port, int flags,
                        int *status );

double smf_calc_mappa( smfHead *hdr, const char *system, AstFrame *sf,
                       int *status );

double smf_calc_meantau( const smfHead *hdr, int * status );

void smf_calc_mmapsize( dim_t headsize, const smfData * data,
                        dim_t *headlen, dim_t *datalen,
                        dim_t *buflen, int * status );

void smf_calc_mode( smfHead * hdr, int * status );

void smf_calc_iqu( ThrWorkForce *wf, smfData *data, dim_t block_start, dim_t block_end,
                   int ipolcrd, int qplace, int uplace, int iplace, NdgProvenance *oprov,
                   AstFitsChan *fc, int pasign, double paoff, double angrot,
                   int submean, int harmonic, int *status );

void smf_calc_skyframe( AstFrame * skyin, const char * system,
                        const smfHead* hdr, int alignsys,
                        AstSkyFrame ** skyframe, double skyref[2],
                        int * moving, int * status );

void smf_calc_smoothedwvm ( ThrWorkForce * wf, const smfArray * alldata,
                            smfData * adata, AstKeyMap* extpars, double **wvmtau,
                            dim_t *nelems, dim_t *ngood, dim_t *ngood_pre_despike,
                            int * status );

void smf_calc_stareimage( smfData *data, const int naver, int *status);

void smf_calc_stats( const smfData *data, const char *mode, const dim_t index,
                     dim_t lo, dim_t hi,  int nclip, const float clip[],
                     double *mean, double *sigma,
                     int *status);

smf_subinst_t smf_calc_subinst ( const smfHead * hdr, int * status );

void smf_calc_telpos( const double obsgeo[3], const char telName[],
                      double telpos[3], int *status );

float smf_calc_telres( AstFitsChan *hdr, int *status );

double smf_calc_wvm( const smfHead *hdr, double approxam, AstKeyMap * extpars,
                     int *status );

void smf_calc_wvm_clear( int *status );

void smf_calcmodel_ast( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        double chunkfactor, int *status);

void smf_calcmodel_com( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status);

void smf_calcmodel_com_old( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                            AstKeyMap *keymap, smfArray **allmodel, int flags,
                            int *status);

void smf_calcmodel_dks( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status);

void smf_calcmodel_ext( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status );

void smf_calcmodel_flt( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status );

void smf_calcmodel_gai( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status);

void smf_calcmodel_noi( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status);

void smf_calcmodel_pln( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status );

void smf_calcmodel_smo( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status );

void smf_calcmodel_pca( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status );

void smf_calcmodel_ssn( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status );

void smf_calcmodel_tmp( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status );

void smf_calcmodel_two( ThrWorkForce *wf, smfDIMMData *dat, int chunk,
                        AstKeyMap *keymap, smfArray **allmodel, int flags,
                        int *status );

void smf_check_convergence( smfDIMMData *dat, int maxiter, double maptol,
                            int *abortedat, int *status );

void smf_check_coords( smfData *data, int *status );

int smf_check_detpos( smfData *data, float mxerr, int report, int *status );

void smf_check_flat ( const smfData *data, int *status );

void smf_check_pol2( Grp *igrp,  int size, int raw, int *status );

dim_t smf_check_quality( ThrWorkForce *wf, smfData *data, int showbad, int *status );

void smf_check_smfDA ( const smfData *idata, smfData *odata, int *status );

void smf_check_smfData ( const smfData *idata, smfData *odata, const int flags,
                         int *status );

void smf_check_smfFile ( const smfData *idata, smfData *odata, int *status );

void smf_check_smfFts ( const smfData *idata, smfData *odata, int *status );

void smf_check_smfHead ( const smfData *idata, smfData *odata, int *status );

void smf_check_units( dim_t count, char current[], smfHead* hdr, int *status );

void smf_checkdets( Grp *detgrp, smfData *data, int *status );

void smf_checkmem_dimm( dim_t maxlen, inst_t instrument, dim_t nrelated,
                        smf_modeltype *modeltyps, dim_t nmodels, dim_t msize,
                        AstKeyMap *keymap, size_t available, dim_t maxfilelen,
                        size_t *necessary, int *status );

void smf_checkmem_map( const dim_t lbnd[2], const dim_t ubnd[2], int rebin, int nw,
                       size_t available, const char *epsout, size_t *necessary,
                       int *status );

double smf_chunkfactor( smfData *data, AstKeyMap *keymap, dim_t contchunk,
                        int *status );

double smf_chunkpar( smfData *data, const char *par, const char *label,
                     AstKeyMap *keymap, dim_t contchunk, int *status );

double smf_chunkweight( smfData *data, AstKeyMap *keymap, dim_t contchunk,
                        int *status );

void smf_clipped_stats1D( const double *data, dim_t nclips,
                          const float clips[], dim_t stride, dim_t nsamp,
                          const smf_qual_t *quality, dim_t qstride,
                          smf_qual_t mask, double *mean, double *sigma,
                          double *median, int usemedian, dim_t *ngood,
                          int *status );

void smf_choose_closest( const smfArray *alldata, const smfData *indata,
                         dim_t *previdx, dim_t *nextidx, int * status );

void smf_choose_darks( const smfArray *darks, const smfData *indata,
                       dim_t *dark1, dim_t *dark2, int * status );

void smf_choose_flat( const smfArray *flats, const smfData *indata,
                      dim_t *flatidx, int * status );

dim_t ***smf_choosepolbins( Grp *igrp, int size, float binsize, float binzero,
                            AstFrameSet *wcsout2d, int *npbin, double **pangle,
                            int *status );

smfTile *smf_choosetiles( Grp *igrp,  int size, dim_t *lbnd,
                          dim_t *ubnd, smfBox *boxes, int spread,
                          const double params[], AstFrameSet *wcsout,
                          int tile_size[ 2 ], int trim, int border,
                          dim_t *ntiles, int *status );

void smf_clean_dksquid( smfData *indata, smf_qual_t mask, dim_t window,
                        smfData *model, int calcdk, int nofit, int replacebad,
                        int *status );

dim_t smf_clean_pca( ThrWorkForce *wf, smfData *data, dim_t t_first,
                      dim_t t_last, double thresh, dim_t ncomp, double lim,
                      smfData **components, smfData **amplitudes,
                      int flagbad, int sub, AstKeyMap *keymap,
                      smf_qual_t mask, int *status );

void smf_clean_pca_chunks( ThrWorkForce *wf, smfData *data, dim_t chunklen,
                           double thresh, int sub, AstKeyMap *keymap, int *status );

void smf_clean_smfArray( ThrWorkForce *wf, smfArray *array,
                         smfArray **noisemaps, smfArray **com, smfArray **gai,
                         AstKeyMap *keymap, int *status );

void smf_clipnoise( double *clipdata, dim_t ndata, int cliplog,
                    double cliplow, double cliphigh, dim_t *nclipped,
                    int *status );

void smf_clone_data ( smfData *idata, smfData **odata, int *status );

void smf_close_file( ThrWorkForce *wf, smfData **, int *status);

void smf_close_mapcoord( smfData *data, int *status );

void smf_close_related( ThrWorkForce *wf, smfArray **relfiles, int *status );

void smf_close_smfDream( smfDream **dream, int * status );

void smf_close_smfGroup( smfGroup **group, int *status );

void smf_collapse( ThrWorkForce *wf, const double *array,
                   const smf_qual_t *qua, smf_qual_t mask, dim_t nx,
                   dim_t ny, dim_t nz, int axis, double **mean,
                   double **sigma, dim_t **ngood, int *status );

void smf_collapse_quality( const smf_qual_t *inqual, smf_qfam_t qfamily,
                           dim_t nbolo, dim_t ntslice,
                           dim_t bstride, dim_t tstride,
                           int collapse_time, smf_qual_t **outqual,
                           int *status );

void smf_collapse_tseries( const smfData *indata, int nclip, const float clip[],
                           double snrlim, int flagconst, smf_dtype dtype,
                           smfData **outdata, int *status );

void smf_concat_smfGroup( ThrWorkForce *wf, AstKeyMap *keymap, const smfGroup *igrp,
                          const smfArray *darks, const smfArray *bpms,
                          const smfArray *flatramps, AstKeyMap * heateffmap,
                          dim_t whichchunk, int ensureflat, int isTordered,
                          AstFrameSet *outfset, int moving,
                          dim_t *lbnd_out, dim_t *ubnd_out, fts2Port fts_port,
                          dim_t padStart,
                          dim_t padEnd, int flags, smfArray **concat,
                          smfData **first, int *status );

smfDA *smf_construct_smfDA( smfDA * tofill, smfData *dksquid, double * flatcal,
                            double * flatpar, smf_flatmeth flatmeth,
                            int nflat, double refres, double * heatval,
                            dim_t nheat, int * status );

smfData *smf_construct_smfData( smfData * tofill, smfFile * file,
                                smfHead * hdr, smfDA * da, smfFts* fts,
                                smf_dtype dtype, void * pntr[2],
                                smf_qual_t * qual, smf_qfam_t qfamily,
                                smfData * sidequal, dim_t isFFT, int isTordered,
                                const dim_t dims[], const dim_t lbnd[],
                                int ndims, int virtual, int ncoeff,
                                double *poly, AstKeyMap *history,
                                int * status );

smfDream *smf_construct_smfDream( smfData *data, int nvert,
                                  dim_t nsampcycle, const int *jigvert,
                                  const double *jigpath, int * status );

smfFile *smf_construct_smfFile(smfFile * tofill, int ndfid, int isSc2store,
                               int isTstream, const char * name,
                               int * status );

smfFts* smf_construct_smfFts( smfFts* tofill,
                              smfData* zpd, smfData* fpm, smfData* sigma,
                              smfData* dead, smfData* a, smfData* b, smfData* c, smfData* d,
                              smfData* phaseFit, smfData* cosmicRays, smfData* fluxJumps,
                              int* status);

smfGroup *smf_construct_smfGroup( const Grp *igrp, int **subgroups,
                                  int *chunk, dim_t *tlen,
                                  int ngroups, int nrelated,
                                  int copysubgroups, int *status );

smfHead *smf_construct_smfHead( smfHead * tofill, inst_t instrument,
                                AstFrameSet * wcs, AstFrameSet * tswcs,
                                AstFitsChan * fitshdr, JCMTState * allState,
                                dim_t curframe, const double instap[],
                                dim_t nframes, double steptime, double scanvel,
                                smf_obsmode obsmode, smf_swmode swmode,
                                smf_obstype obstype, smf_obstype seqtype,
                                smf_inbeam_t inbeam, unsigned int ndet,
                                double fplanex[], double fplaney[],
                                double detpos[], char *detname, int rpazel,
                                double tsys[], const char title[],
                                const char dlabel[], const char units[],
                                const double telpos[], char * ocsconfig,
                                const char obsidss[], int * status );

void smf_convert_bad( ThrWorkForce * wf, smfData *data, int *status );

void smf_coords_lut( smfData *data, dim_t tstep, dim_t itime_lo,
                     dim_t itime_hi, AstSkyFrame *abskyfrm,
                     AstMapping *oskymap, int moving, dim_t olbnd[ 2 ],
                     dim_t oubnd[ 2 ], fts2Port fts_port, int *lut,
                     double *angle, double *lon,
                     double *lat, dim_t *onmap, int *status );

void smf_copytime( struct timeval *target, struct timeval *source,
                   int *status);

int smf_correct_extinction( ThrWorkForce * wf, smfData *data, smf_tausrc *thetausrc,
                             smf_extmeth method, AstKeyMap * extpars, double tau,
                             double *allextcorr, double **wvmtaucache, int *status);

void smf_create_bolfile( ThrWorkForce * wf, const Grp * rgrp, dim_t index,
                         const smfData* refdata, const char * datalabel,
                         const char *units, int hasqual, smfData **respmap, int *status );

smfCreateLutwcsCache *smf_create_lutwcs( int clearcache,
                                         const double *fplane_x,
                                         const double *fplane_y,
                                         const int n_pix,
                                         const JCMTState *state,
                                         double dut1,
                                         double dtai,
                                         const double instap[2],
                                         const double telpos[3],
                                         AstFrameSet **fset,
                                         smfCreateLutwcsCache *cache,
                                         int *status );

void smf_create_qualname( const char *mode, int indf, IRQLocs **qlocs,
                          int *status);

smfArray *smf_create_smfArray( int *status );

smfDA *smf_create_smfDA( int * status );

smfData* smf_create_smfData( int flags, int * status );

smfDream *smf_create_smfDream( int * status );

smfFile* smf_create_smfFile( int * status );

smfFilter *smf_create_smfFilter( smfData *template, int *status );

smfFts* smf_create_smfFts(int* status);

smfHead* smf_create_smfHead( int * status );

void smf_create_tswcs( smfHead *hdr, int isTordered, AstFrameSet **frameset, int *status );

double smf_cso2filt_applycoeff( double csotau, const double coeff[2],
                                int *status );

void smf_cso2filt_coeff( const smfHead *hdr,  AstKeyMap * extpars,
                         dim_t nvals, double coeffs[], dim_t *ncoeff, int *status);

double smf_cso2filt_tau( const smfHead *hdr, double csotau, AstKeyMap * extpars, int *status);

void smf_cubebounds( Grp *igrp,  int size, AstSkyFrame *oskyframe,
                     int autogrid, int usedetpos, AstFrameSet *spacerefwcs,
                     AstFrameSet *specrefwcs, double par[ 7 ],
                     Grp *detgrp, int moving, int specunion, dim_t lbnd[ 3 ],
                     dim_t ubnd[ 3 ], AstFrameSet **wcsout, int *npos,
                     int *hasoffexp, smfBox **boxes, int *polobs,
                     double *aref, double *bref, int *status );

void smf_cubegrid( Grp *igrp,  int size, char *system, int usedetpos,
                   int autogrid, int alignsys, Grp *detgrp, double par[ 7 ],
                   int poserrfatal, float poserrmax, int *moving,
                   AstSkyFrame **skyframe, int *sparse, int *gottsys, int *status );

int smf_dataOrder( ThrWorkForce *wf, smfData *data, int isTordered, int *status );

void * smf_dataOrder_array( ThrWorkForce *wf, void * oldbuf, smf_dtype oldtype,
                            smf_dtype newtype, dim_t ndata, dim_t ntslice,
                            dim_t nbolo, dim_t tstr1, dim_t bstr1,
                            dim_t tstr2, dim_t bstr2, int inPlace,
                            int freeOld, int * status );

void * smf_dataOrder_ndims( void * oldbuf, smf_dtype dtype, dim_t ndata,
                dim_t ndims, const dim_t dims[], const dim_t perm[],
                int inPlace, int freeOld, int * status );

smfDA * smf_deepcopy_smfDA ( ThrWorkForce *wf, const smfData *old, int cpdks, int * status);

smfData * smf_deepcopy_smfData ( ThrWorkForce *wf, const smfData *old, const int rawconvert,
                                 const int flags, int assertOrder,
                                 int isTordered, int * status);

smfFile * smf_deepcopy_smfFile ( const smfFile *old, int * status );

smfFts* smf_deepcopy_smfFts(const smfData* old, int* status);

smfHead * smf_deepcopy_smfHead ( const smfHead *old, int * status);

dim_t smf_despike_wvm(double* data, dim_t n, int width, double tol, int* status);

void smf_detmask( const char *type, const void *in, int len, int ndim,
                  const hdsdim *dims_in, int maxis, const dim_t *mask,
                  void *out, int *status );

void smf_detmaskc( const char *in, int len, int ndim, const int *dims_in,
                   int maxis, const dim_t *mask, char *out, int *status );

smfDetposWcsCache *smf_detpos_wcs( smfHead *hdr, dim_t index, double dut1,
                                   double dtai, const double telpos[3],
                                   AstFrameSet **fset,
                                   smfDetposWcsCache *cache, int *status );

void smf_diag( ThrWorkForce *wf, HDSLoc *loc, dim_t *ibolo, int irow,
               int power, int time, dim_t isub, smfDIMMData *dat,
               smf_modeltype type, smfArray *model, int res,
               const char *root, int mask, double mingood, int cube,
               int map, int addqual, smfSampleTable *table,
               double chunkfactor, const char *btable, AstKeyMap *keymap,
               int *status );

void smf_diagnostics( ThrWorkForce *wf, int where, smfDIMMData *dat,
                      dim_t chunk, AstKeyMap *keymap, smfArray **allmodel,
                      smf_modeltype type, int flags, double chunkfactor,
                      int *status );

double smf_difftime( struct timeval *tv1, struct timeval *tv2, int *status);

void smf_display_projpars( AstSkyFrame * skyframe, double par[7],
                           int *status);

void smf_downsamp_smfData( ThrWorkForce *wf, smfData *idata,
                           smfData **odata, dim_t ontslice, int todouble,
                           int method, int *status );

void smf_dream_calcweights ( smfData *data, const Grp *ogrp, const int index,
                             const double gridstep, const int ngrid,
                             const int *gridminmax, int gridpts[][2],
                             int *status );

void smf_dream_getgrid( AstKeyMap *keymap, double *gridstep, int *ngrid,
                        int gridminmax[4], int gridpts[][2], int *status);

void smf_dream_setjig( char subarray[], int nsampcycle, double gridstep,
                       double jigpath[][2], int *status);

void smf_dreamsolve( smfData *data, int *status );

void smf_dtype_arraycopy( void *ary_out, const smf_dtype dtype_out,
                          void *ary_in, const smf_dtype dtype_in,
                          dim_t nelem, int *status );

int smf_dtype_check( const smfData* data, const char * type, smf_dtype itype,
                     int *status );

int smf_dtype_check_fatal( const smfData* data, const char * type,
                           smf_dtype itype, int *status );

smf_dtype smf_dtype_fromstring( const char * dtype, int * status );

dim_t smf_dtype_size( const smfData* data, int * status );

const char * smf_dtype_str( smf_dtype type, int * status );

const char *smf_dtype_string( const smfData* data, int * status );

dim_t smf_dtype_sz( const smf_dtype dtype, int *status );

void smf_dump_smfData( const smfData *data, int showflags, int *status );

Grp * smf_expand_filegroup( const Grp * igrp, int * status );

void smf_expand_tilegroup ( Grp * ogrp, dim_t ntile, int npbin,
                            dim_t * outsize, int * status);

void smf_expmodel_dks( const smfData *indata, smfData **outdata, int *status);

void smf_expmodel_two( const smfData *indata, smfData **outdata, int *status);

void smf_expmodel_init( const smfData *indata, smfData **outdata, int *status);

void smf_export_noi( smfData *noi, const char *name, dim_t boxsize, int *status );

void smf_ext2km( int indf, const char *xname, AstKeyMap *keymap, int mode,
                 int *status );

void smf_extracols( smfHead *hdr, Grp *colgrp, void **cols_info,
                    AstKeyMap **km, int *status );

double smf_fcf( const smfHead * hdr, int *status );

double *smf_ffclean( ThrWorkForce *wf, const double *map, const double *mapvar,
                     const dim_t dims[2], dim_t box, dim_t box0, double thresh,
                     int resids, int neg, double *sigma, int *status );

dim_t smf_ffmask( ThrWorkForce *wf, double *data, smf_qual_t *qua,
                   dim_t nbolo, dim_t ntime, dim_t tstride,
                   dim_t bstride, dim_t t_first, dim_t t_last,
                   dim_t box, double cliphi, double cliplo, int *status );

smfData *smf_fft_2dazav( const smfData *data, double *df, int *status );

smfData *smf_fft_avpspec( const smfData *pspec, smf_qual_t *quality,
                          dim_t qstride, smf_qual_t mask, double *weights,
                          int *status );

void smf_fft_cart2pol( ThrWorkForce *wf, smfData *data, int inverse, int power, int *status );

smfData *smf_fft_data( ThrWorkForce *wf, smfData *indata, smfData *outdata,
                       int inverse, dim_t len, int *status );

void smf_fill2d( int mingood, int box, double fillval, dim_t nx, dim_t ny,
                 double *data, double *work, int *status );

void  smf_fillgaps( ThrWorkForce *wf, smfData *data,
                    smf_qual_t mask, int *status );

void smf_filter_complement( smfFilter *filt, int *status );

void smf_filter_delay( smfFilter *filt, double delay, int *status );

void smf_filter_edge( smfFilter *filt, double f, int order, int lowpass, int *status );

void smf_filter_execute( ThrWorkForce *wf, smfData *data, smfFilter *filt,
                         int complement, int whiten, int *status );

void smf_filter_fromkeymap( smfFilter *filt, AstKeyMap *keymap,
                            const char *qualifier, const smfHead *hdr,
                            int *dofft, int *whiten, int *box, int *status );

void smf_filter_getlowf( smfFilter *filt, smfHead *hdr, double *period,
                         int *status );

void smf_filter_ident( smfFilter *filt, int complex, int *status );

void smf_filter_mapchange( ThrWorkForce *wf, smfDIMMData *dat,
                           double filt_diff, int *status);

void smf_filter_mce( smfFilter *filt, int noinverse, int *status );

void smf_filter_notch( smfFilter *filt, const double f_low[],
                       const double f_high[], dim_t n, int *status );

void smf_filter_r2c( smfFilter *filt, int *status );

void smf_filter2d_edge( smfFilter *filt, double f, int lowpass, int *status );

void smf_filter2d_execute( ThrWorkForce *wf, smfData *data, smfFilter *filt,
                           int complement, int *status );

void smf_filter2d_gauss( smfFilter *filt, double fwhm, int *status );

void smf_filter2d_whiten( ThrWorkForce *wf, smfFilter *filt, smfData *map,
                          double minfreq, double maxfreq, dim_t smooth,
                          int *status );

void smf_find_acsis_corners( smfData *data, double xc[4], double yc[4],
                             int *status );

void
smf_find_airmass_interval( const smfHead * hdr, double *amstart,
                           double * amend, double *elstart, double *elend,
                           int * status );

dim_t *smf_find_bad_dets( Grp *igrp,  int size, int *nbaddet, int *status );

void smf_find_dateobs(  const smfHead * hdr, double *dateobs,
                        double *dateend, int *status);

int smf_find_gains( ThrWorkForce *wf, int noflag, smfData *data,
                    const unsigned char *mask, smfData *lut, double *template,
                    AstKeyMap *keymap, smf_qual_t goodqual, smf_qual_t badqual,
                    smfData *gai, int *nrej, int *status );

int smf_find_gains_array( ThrWorkForce *wf, int noflag, smfArray *data,
                          const unsigned char *mask, smfArray *lut,
                          double *template, AstKeyMap *keymap,
                          smf_qual_t goodqual, smf_qual_t badqual,
                          smfArray *gain, int *nrej, int *status );

dim_t *smf_find_median( const float *farray, const double *darray, dim_t nel,
                        dim_t *hist, float *median, int *status );

void smf_find_science( ThrWorkForce *wf, const Grp * ingrp, Grp **outgrp, int reverttodark,
                      Grp **darkgrp, Grp **flatgrp, int reducedark, int calcflat,
                      smf_dtype darktype, smfArray ** darks, smfArray **fflats,
                      AstKeyMap **heateffmap, double * meanstep, int * status );

void smf_find_seqcount( const smfHead * hdr, int *seqcount, int *status );

void smf_find_subarray ( const smfHead * hdr, char subarray[],
                         dim_t buflen, sc2ast_subarray_t *subnum, int *status );

void smf_find_thetabins( const smfData *data, int nosign, double **bins,
                         double **bincen, dim_t *nbin, dim_t **whichbin,
                         int *status );

void smf_fit_circle( dim_t n, double *ax, double *ay, double *wx,
                     double *wy, double *rad, double *xc, double *yc,
                     double *rms, int *status );

void smf_fit_qui( ThrWorkForce *wf, smfData *idata, smfData **odataq,
                  smfData **odatau, smfData **odatai, smfData **odataf, dim_t box,
                  int ipolcrd, int pasign, double paoff, double angrot,
                  const char *north, int harmonic, double ang0, double *polang,
                  int *status );

void smf_fit_poly( ThrWorkForce *wf, smfData *data, const dim_t order,
                   int remove, double *poly, int *status);

void smf_fit_poly1d ( dim_t order, dim_t nelem, double clip, int maxiter,
                      const double x[], const double y[], const double vary[],
                      const smf_qual_t qual[], double coeffs[],
                      double varcoeffs[], double polydata[], int64_t *nused,
                      int *status );

void smf_fit_poly1d_chisq ( dim_t order, dim_t nelem, const double x[],
                       const double y[], const double vary[],
                       const smf_qual_t qual[], double coeffs[],
                       double varcoeffs[], double polydata[], int64_t *nused,
                       double * rchisq, int *status );

void smf_fit_pspec( const double *pspec, dim_t nf, dim_t box, double df,
                    double minfreq, double whitefreq, double maxfreq,
                    double *a, double *b, double *w, int *status );

void smf_fit_profile(  smfData *data, smfArray *pardata, void *pfcntrl,
                       int *status );

void smf_fits_crchan( dim_t nfits, const char * headrec, AstFitsChan ** fits,
                      int *status);

void smf_fits_export2DA( AstFitsChan *fitschan, dim_t *ncards,
                         char * fitsrec, int *status );

/* Do not return result since we want the interface to remain the same when a
   string is required. If we return a string we must know who should free it */

void smf_fits_getD( const smfHead * hdr, const char * cardname,
                    double * result, int * status );

void smf_fits_getI( const smfHead * hdr, const char * cardname, int * result,
                    int * status );

void smf_fits_getL( const smfHead * hdr, const char * cardname, int * result,
                    int * status );

void smf_fits_getS( const smfHead * hdr, const char * cardname,
                    char result[70], dim_t len, int * status );

AstKeyMap *smf_fits_maths( AstKeyMap *maths, const char *exp,
                           smfHead *hdr, double *value, int *status );

void smf_fits_outhdr( AstFitsChan * inhdr, AstFitsChan ** outhdr,
                      int * status );

int smf_fits_updateD( smfHead * hdr, const char * name, double value,
                      const char * comment, int *status );

int smf_fits_updateI( smfHead * hdr, const char * name, int value,
                      const char * comment, int *status );

int smf_fits_updateL( smfHead * hdr, const char * name, int value,
                      const char * comment, int *status );

int smf_fits_updateS( smfHead * hdr, const char * name, const char * value,
                      const char * comment, int *status );

int smf_fits_updateU( smfHead * hdr, const char * name,
                      const char * comment, int *status );

int smf_fix_data( msglev_t msglev, smfData *data, int * status );

int smf_fix_metadata( msglev_t msglev, smfData * data, int * status );

int smf_fix_metadata_acsis( msglev_t msglev, smfData * data, int have_fixed,
                            int *ncards, int * status );

int smf_fix_metadata_scuba2( msglev_t msglev, smfData * data, int have_fixed,
                             int *ncards, int * status );

void smf_fix_pol2( smfArray *array, int *status );

dim_t smf_flag_rings( double *data, dim_t stride, dim_t nel, dim_t box1, dim_t box2,
                    double nsigma, dim_t wing, dim_t minsize, smf_qual_t *qual,
                    smf_qual_t qmask, const unsigned char *mask,
                    const int *lut, int *status );

void smf_flag_slewspeed( smfData *data, double smin, double smax,
                         dim_t *nflagged, double *average_speed,
                         int *status );

void smf_flag_spikes( ThrWorkForce *wf, smfData *data, smf_qual_t mask,
                      double thresh, dim_t box, dim_t *nflagged,
                      int *status );

void smf_fix_steps( ThrWorkForce *wf, smfData *data, double dcthresh,
                    int dcsmooth, int dcfitbox, int dcmaxsteps,
                    int dclimcorr, int meanshift, dim_t *nrej,
                    smfStepFix **steps, dim_t *nstep, int *status );

void smf_flat_assign ( int use_da, smf_flatmeth inflatmeth, double refres,
                       const smfData * powval, const smfData * bolval,
                       smfData * updata, int *status );

void
smf_flat_badflat( ThrWorkForce *wf, smfData * refdata, smfData ** resp, int * status );

dim_t
smf_flat_calcflat( ThrWorkForce *wf, msglev_t msglev, const char flatname[],
                   const char resistpar[],
                   const char methpar[], const char orderpar[],
                   const char resppar[], const char respmaskpar[],
                   const char snrminpar[], const Grp * prvgrp,
                   smfData *flatdata, smfData **respmapout, int *status );

void smf_flat_fastflat( const smfData * fflat, smfData **bolvald, int *status );

void smf_flat_fitpoly ( const smfData * powvald, const smfData * bolvald,
                        double snrmin, dim_t order, smfData **coeffs,
                        smfData ** polyfit, int *status );

void smf_flat_malloc( dim_t nheat, const smfData * refdata,
                      smfData ** powvald, smfData **bolvald, int *status );

void smf_flat_mergedata( const smfArray * heatframes,
                         const double heatval[], smfData ** bolvald,
                         int * status );

smf_flatmeth smf_flat_methcode ( const char * flatname, int * status );

const char * smf_flat_methstring( smf_flatmeth flatmeth, int * status );

int
smf_flat_override ( const smfArray *flats, smfData * indata, int *status );

void
smf_flat_params( const smfData * refdata, const char resistpar[],
                 const char methpar[], const char orderpar[], const char snrminpar[],
                 double * refohms, double **resistance, int * nrows,
                 int * ncols, smf_flatmeth  *flatmeth,
                 int * order, double * snrmin, smfData ** heateff, int * status );

void smf_flat_precondition( int allbad, smfData * powvald, smfData * bolvald,
                            int *status );

dim_t smf_flat_responsivity ( smf_flatmeth method, smfData *respmap, double snrmin, dim_t order,
                               const smfData * powval, const smfData * bolval,
                               double refres, smfData ** polyfit, int *status );

void smf_flat_smfData ( const smfData *data, smf_flatmeth * flatmethod,
                        double * refres, smfData ** powval, smfData **bolval,
                        int *status );

void smf_flat_standardpow( const smfData * bolvald, double refohms,
                           const double resistance[],
                           smfData ** powref, smfData ** bolref, int * status);

void smf_flat_write( ThrWorkForce *wf, smf_flatmeth flatmeth, const char * flatname,
                     double refres, const smfData * bolval,
                     const smfData * powref, const smfData * bolref,
                     const smfData * polyfit, const Grp * prvgrp, int * status );

void smf_flatfield ( ThrWorkForce *wf, smfData *idata, const smfArray * flats, AstKeyMap * heateffmap,
                     smfData **odata, const int flags, int *status );

int smf_flatfield_smfData ( smfData *data, const smfArray * flats, AstKeyMap * heateffmap,
                            int force, int *status );

void smf_flatten ( smfData *data, AstKeyMap * heateffmap, int *status );

AstKeyMap * smf_free_effmap( AstKeyMap * effmap, int *status);

smfFilter *smf_free_smfFilter( smfFilter *filt, int *status );

dim_t ***smf_freepolbins( int nndf, int npbin, double **pangle, dim_t ***ptime,
                          int *status );

smfTile *smf_freetiles( smfTile *tiles, int size, int *status );

void smf_gandoff( dim_t ibolo, dim_t time0, dim_t time1, dim_t ntime,
                  dim_t gbstride, dim_t gcstride, double *gai_data,
                  dim_t nblock, dim_t gain_box, double *wg, double *woff,
                  double *wcc, int *status );

int  smf_gauest( const double y[], dim_t n, double *p, int np, double rms,
                 double cutamp, double cutsig, int q );

void smf_geod( const double pos[3], double *phi, double *h, double *lambda );

void smf_get_cleanpar( AstKeyMap *keymap, const char *qualifier,
                       const smfData *data, double *badfrac,
                       int *dcbox, int *dcbad, double *dcthresh,
                       int *dcsmooth, int *dclimcorr, int *dkclean,
                       int *fillgaps, int *zeropad, double *filt_edgelow,
                       double *filt_edgehigh, double *filt_edge_smallscale,
                       double *filt_edge_largescale, double *filt_notchlow,
                       double *filt_notchhigh, int *filt_nnotch,
                       int *dofilt, double *flagslow, double *flagfast,
                       int *order, double *spikethresh, dim_t *spikebox,
                       double *noisecliphigh, double *noisecliplow,
                       int *whiten, int *compreprocess, dim_t *pcalen,
                       double *pcathresh, int *groupsubarray,
                       double *downsampscale, double *downsampfreq,
                       int *noiseclipprecom, int *deconvmce, double *delay,
                       int *filt_order, dim_t *startup, int *status );

void smf_get_dims( const smfData *data, dim_t *nrows, dim_t *ncols,
                   dim_t *nbolo, dim_t *ntslice, dim_t *ndata,
                   dim_t *bstride, dim_t *tstride,int *status );

void smf_get_extpar( AstKeyMap *keymap, smf_tausrc *tausrc,
                     smf_extmeth *extmeth, int *import, int *status );

dim_t smf_get_findex( double f, double df, dim_t nf, int *status );

dim_t smf_get_freemem ( double * mbytes, dim_t *pagesize,
                         int64_t *physsize, int * status );

void smf_get_goodrange( const smf_qual_t *quality, dim_t ntslice,
                        dim_t tstride, smf_qual_t mask,
                        dim_t *istart, dim_t *iend, int *status );

void smf_get_gridcoords( double *row, double *col, int nrow, int ncol,
                         int *status );

void smf_get_grp_metadata( const Grp *grp, const char *name, char *value,
                           int *status );

unsigned char *smf_get_mask( ThrWorkForce *wf, smf_modeltype mtype,
                             AstKeyMap *config, smfDIMMData *dat, int flags,
                             int *domask, int *status );

void smf_get_moltrans ( double restFreq, const char **molecule,
                        const char **transition, int *status );

int smf_get_ndfid ( const HDSLoc *loc, const char *name, const char *accmode,
                    const char *state, const char *dattype, const int ndims,
                    const dim_t *lbnd, const dim_t *ubnd, int *status );

double smf_get_nsamp( AstKeyMap *keymap, const char *name,
                      const smfData *data, dim_t *nsamp, int *status );

dim_t smf_get_padding( AstKeyMap *keymap, int report,const smfHead *hdr,
                       double, int *status );

void smf_get_projpar( AstSkyFrame *skyframe, const double skyref[2],
                      int moving, int autogrid,
                      int nallpos, const double * allpos, float telres,
                      double map_pa, double par[7], int *sparse, int *useauto,
                      int *status );

HDSLoc * smf_get_smurfloc( const smfData *data, const char * accmode, int * status );

void smf_get_spread( char *pabuf, int *spread, int *nparam, int *status );

void smf_get_taskname( char * taskname, char * prvname, int * status);

HDSLoc *smf_get_xloc ( const smfData *data, const char *extname,
                       const char *extype, const char *accmode,
                       const int ndims, const dim_t *dims, int *status );

void smf_getfitsd( const smfHead *hdr, const char *cardname,
                   double *result, int *status );

void smf_getfitsi( const smfHead *hdr, const char *cardname,
                   int *result, int *status );

void smf_getfitss( const smfHead *hdr, const char * name, char * result,
                   dim_t len, int * status );

char *smf_getobsidss( AstFitsChan *hdr, char * obsid, dim_t szobs,
                      char * obsidss, dim_t szss, int *status );

void smf_getrefwcs( const char *param, Grp *igrp, AstFrameSet **specwcs,
                    AstFrameSet **spacewcs, int *isjsa, int *status );

void smf_getspectralwcs( AstFrameSet *fset, int type, AstFrameSet **specwcs,
                         int *status );

AstKeyMap *smf_groupscans( const Grp *igrp,  int size, int *maxsyspop,
                           int *conform, Grp **ogrp, int *status );

Grp *smf_grp_new( const Grp *grp, const char *type, int *status );

void smf_grp_related( Grp *igrp, const dim_t grpsize,
                      const int grouping, const int checksubinst,
                      double maxlen_s, double *srate_maxlen,
                      AstKeyMap *keymap, dim_t *maxconcatlen,
                      dim_t *maxfilelen, smfGroup **group,
                      Grp **basegrp, dim_t *pad, int *status );

void smf_handler( int sig );

void smf_history_add( smfData* data, const char * appl,
                      int *status);

int smf_history_check( const smfData* data, const char * appl, int *status);

void smf_history_copy( Grp *igrp,  int ifile, int ondf, int *status );

void smf_history_read( smfData* data, int *status);

void smf_history_write( const smfData* data, int *status);

void smf_import_array( ThrWorkForce *wf,  smfData *refdata, const char *dumpdir, const char *name, int bad,
                       int expand, smf_dtype type, void *dataptr, dim_t *lut_lbnd,
                       dim_t *lut_ubnd, int *status );

int smf_import_noi( const char *name, smfDIMMHead *head, AstKeyMap *keymap,
                    smfData *qua, double *dataptr, int *status );

void smf_inbeam_str ( smf_inbeam_t inbeam, char *inbeamstr, dim_t lenstr, int * status );

int smf_initial_sky( ThrWorkForce *wf, AstKeyMap *config, smfDIMMData *dat,
                     double chunkfactor, int *iters, int *status );

void
smf_inst_get( const smfHead * hdr, inst_t * instrument,
              smf_realinst_t * realinst, int * status );

void smf_instap_get( smfHead * hdr, int * status );

int smf_is_wvm_usable( const smfHead * hdr, int * status );

int smf_isdark( const smfData *data, int * status );

int smf_isfft( const smfData *indata, dim_t rdims[2], dim_t *nbolo,
               dim_t fdims[2], double df[2], int *ndims, int *status );

void smf_iteratemap( ThrWorkForce *wf, Grp *igrp, const Grp *iterrootgrp,
                     const Grp *bolrootgrp, const Grp *shortrootgrp, const Grp *cyclerootgrp,
                     const Grp *flagrootgrp, const Grp *samprootgrp,
                     AstKeyMap *keymap,
                     const smfArray *darks, const smfArray *bbms,
                     const smfArray * flatramps, AstKeyMap * heateffmap, AstFrameSet *outfset,
                     int moving, dim_t *lbnd_out, dim_t *ubnd_out, fts2Port fts_port, size_t maxmem,
                     int abortsoon, int *abortedat, double *map, int *hitsmap, double * exp_time,
                     double *mapvar, smf_qual_t *mapqual, double *weights,
                     char data_units[], char data_label[], double * nboloeff,
                     dim_t *numcontchunks,  dim_t *ncontig, int *memlow,
                     dim_t *numinsmp, dim_t *numcnvg, int *iters,
                     double *totexp, double *nomfcf, int *status );

const char *smf_keyname( AstKeyMap *keymap, const char *basename,
                         const char *qualifier, char *buf, dim_t lbuf,
                         int *status );

void smf_km2ext( int indf, const char *xname, AstKeyMap *keymap,
                 int *timeout, int *status );

void smf_kmmerge( const char *xname, AstKeyMap *keymap, dim_t *index,
                  int ndet, int *mask, dim_t nts, int *rts, dim_t j0,
                  dim_t j1, int *status );

void smf_labelunit( Grp *igrp,  int size, smfData *odata, int *status );

void smf_lock_data( smfData *data, int lock, int *status );

void smf_lock_related( smfArray *data, int lock, int *status );

int  smf_lsqfit( smf_math_function fid, const double xdat[], int xdim, const double ydat[], const float wdat[],
                 dim_t ndat, double *fpar, double *epar, const int mpar[],
                 int npar, int ncomp, float tol, int its, float lab,
                 const int iopt[], const double dopt[] );

void smf_makefitschan( const char *system, double crpix[2], double crval[2],
                       double cdelt[2], double crota2, AstFitsChan *fc,
                       int *status );

AstMapping *smf_maketanmap( double lon, double lat, AstMapping *cache[ 2 ],
                            int *status );

double smf_map_getpixsize( const smfData *data, int *status );

void * smf_map_or_malloc( dim_t nelem, smf_dtype type, int zero, int indf,
                          const char * comp, int * status );

void smf_map_spikes( ThrWorkForce *wf, smfData *data, smfData *variance,
                     int *lut, smf_qual_t mask, double *map, double *mapweight,
                     int *hitsmap, double *mapvar, double thresh,
                     dim_t *nflagged, int *status );

void smf_mapbounds( int fast, Grp *igrp,  int size, const char *system,
                    AstFrameSet * spacesrefwcs, int alignsys,
                    dim_t *lbnd_out, dim_t *ubnd_out, AstFrameSet **outframeset,
                    int *moving, smfBox ** boxes, fts2Port fts_port,
                    AstKeyMap *config, int *status );

AstRegion *smf_mapregion_approx( Grp *igrp, int *status );

void smf_mask_noisy( ThrWorkForce *wf, smfData *data, AstKeyMap *kmap, smfData **noise,
                     double sigcliphigh, double sigcliplow, int cliplog,
                     int zeropad, int * status );

void smf_maskacsis( int indf, dim_t *mask, int *status );


void smf_meanshift( double *indata, double *outdata, dim_t nel, dim_t stride, int box1,
                    double box2, smf_qual_t *qual, smf_qual_t mask, float wlim,
                    int *status );

smf_math_function
smf_mathfunc_fromstring( const char * mathfunc, int * status );

const char * smf_mathfunc_str( smf_math_function type, int * status );

void smf_math_functions( smf_math_function fid, double xdat, const double fpar[], int ncomp,
             double *value, double *pderv, int *npar,
             const int iopt[], const double dopt[] __attribute__((unused)) );

double smf_math_fvalue( smf_math_function fid, double xdat, const double fpar[], int ncomp,
            const int iopt[], const double dopt[] );

void smf_math_fpderv( smf_math_function fid, double xdat, const double fpar[], int ncomp,
              double *epar, const int iopt[], const double dopt[] );

int smf_math_fnpar( smf_math_function fid );

void smf_math_cmplxerrfunc( double Rz, double Iz, double *Rr, double *Ir );

void smf_median( const double *array, dim_t nel, size_t stride, int bad, double *median, int *status );

void smf_median_smooth( dim_t box, smf_filt_t filter_type, float wlim,
                        dim_t el, const double *dat,
                        const smf_qual_t *qua, dim_t stride,
                        smf_qual_t mask, double *out, double *w1,
                        dim_t *w2, dim_t *w3, int *status );

void smf_model_create( ThrWorkForce *wf, const smfGroup *igroup,
                       smfArray **iarray, const smfArray *darks,
                       const smfArray *bbms, const smfArray *flatramps,
                       AstKeyMap * heateffmap, const smfArray *noisemaps,
                       dim_t nchunks, smf_modeltype mtype, int isTordered,
                       AstFrameSet *outfset, int moving, dim_t *lbnd_out,
                       dim_t *ubnd_out, fts2Port fts_port,
                       smfArray **qua, smfGroup **mgroup, smfArray **mdata,
                       AstKeyMap *keymap, int *status );

void smf_model_createHdr( smfData *model, smf_modeltype type,
                          smfData *refdata, int *status );

smf_expmodelptr smf_model_getexpptr( smf_modeltype type, int *status);

void
smf_model_dataOrder( ThrWorkForce *wf, smfDIMMData *dat, smfArray ** allmodel, int chunk, smf_modeltype toOrder,
                     int isTordered, int * status );

const char *smf_model_getname( smf_modeltype type, int *status);

smf_calcmodelptr smf_model_getptr( smf_modeltype type, int *status);

smf_modeltype smf_model_gettype( const char *modelname, int *status );

Grp *smf_ndg_copy( const Grp *grp1, dim_t indxlo, dim_t indxhi, int reject, int *status );

void smf_obsmap_fill( const smfData * data, AstKeyMap * obsmap,
                      AstKeyMap * objmap, int * status );

void smf_obsmap_report( msglev_t msglev, AstKeyMap * obsmap, AstKeyMap * objmap,
                        int * status );

const char * smf_obsmode_str( smf_obsmode type, int * status );

const char * smf_obstype_str( smf_obstype type, int * status );

void smf_offsets( double baselon, double baselat, double *lon, double *lat,
                  int *status );

int smf_open_and_flatfield ( ThrWorkForce *wf, const Grp *igrp, const Grp *ogrp, dim_t index,
                             const smfArray * darks, const smfArray * ramps,
                             AstKeyMap * heateffmap, smfData **ffdata, int *status);

void smf_open_asdouble( ThrWorkForce *wf,  const Grp *igrp, dim_t index, const smfArray* darks,
                        const smfArray* flatramps, AstKeyMap * heateffmap, int ensureflat,
                        smfData **data, int *status );

void smf_open_file( ThrWorkForce *wf, const Grp * igrp, dim_t index, const char * mode,
                    int withHdr, smfData ** data, int *status);

void smf_open_file_job( ThrWorkForce *wf, int wait, const Grp *igrp,
                        dim_t index, const char *mode, int flags,
                        smfData **data, int *status );

void smf_open_group( ThrWorkForce *wf, const Grp * igrp, const dim_t refdims[],
                     smfArray **files, int *status );

void smf_open_mapcoord( smfData *data, const char *mode, int *status );

void smf_open_model( const Grp *igrp, dim_t index, const char *mode,
                     smfData **data, int *status );

void smf_open_ndf( const int newndf, const char accmode[],
                   smf_dtype dtype, smfData **ndata,
                   int *status);

void smf_open_ndfname( const HDSLoc *loc, const char accmode[],
                       const char extname[],
                       const char state[], const char dattype[],
                       const int ndims, const dim_t lbnd[], const dim_t ubnd[],
                       const char datalabel[], const char dataunits[],
                       AstFrameSet * wcs, smfData **ndfdata, int *status);

void smf_open_newfile( ThrWorkForce *wf, const Grp * igrp, dim_t index, smf_dtype dtype,
                       const int ndims, const dim_t *lbnd, const dim_t *ubnd,
                       int flags, smfData ** data, int *status);

void
smf_open_raw_asdouble( ThrWorkForce *wf, const Grp *igrp, dim_t index, const smfArray* darks,
                       smfData **data, int *status );

void smf_open_related( ThrWorkForce *wf, const smfGroup *group, const dim_t subindex,
                       const char *accmode, smfArray **relfiles,
                       int *status );

void smf_open_related_model( const smfGroup *group, const int subindex,
                             const char *accmode, smfArray **relfiles,
                             int *status );

FILE *smf_open_textfile( const char *param, const char *mode, const char *def,
                         int *status );

int smf_pattern_extract ( const char * sourcestr, const char * pattern,
                          double *dresult, char * sresult, dim_t szstr, int * status );

dim_t smf_pca( ThrWorkForce *wf, smfData *data, smfData *lut,
                unsigned char *mask, double corlim, int *status );

void smf_pcorr( smfHead *head, const Grp *igrp, int *status );

void smf_polang( int indf, AstFitsChan *fc, double epoch, double *alpha,
                 double *el, double *az, double *a, double *b, int *status );

void smf_polext( int ondf, int store_angle, double angle, const char *domain, int axis, int *status );

void smf_pread( Grp *igrp, const char *param, int *status );

void smf_projbox( Grp *igrp, AstFrameSet *refwcs,
                  dim_t lbnd[ NDF__MXDIM ], dim_t ubnd[ NDF__MXDIM ],
                  dim_t dims[ NDF__MXDIM ], int *status );

void smf_puthistory( smfData *data, const char *appn, int *status );

dim_t smf_qfamily_count( smf_qfam_t qfamily, int * status );

const char * smf_qfamily_str( smf_qfam_t qfamily, int * status );

smf_qual_t * smf_qual_map( ThrWorkForce *wf, int indf, const char mode[],
                           smf_qfam_t *family, dim_t *nmap, int * status );

const char *smf_qual_str( smf_qfam_t family, int usebit, int bit_or_val,
                          const char **descr, int *status );

smf_qual_t smf_qual_str_to_val( const char *qname, smf_qfam_t * family, int * status );

int smf_qual_to_bit( smf_qual_t q, int *status );

smf_qual_t * smf_qual_unmap( ThrWorkForce *wf, int indf, smf_qfam_t family,
                             smf_qual_t * qual, smf_qual_t mask, int * status );

void smf_qualstats( ThrWorkForce *wf, smf_qfam_t qfamily, int nopad,
                    const smf_qual_t *qual, dim_t nbolo, dim_t bstride,
                    dim_t ntslice, dim_t tstride,  dim_t qcount[SMF__NQBITS],
                    dim_t *ngoodbolo, dim_t *nmap, dim_t *nmax, dim_t * tpad,
                    int *status );

void smf_qualstats_model( ThrWorkForce *wf, smf_qfam_t qfamily, int nopad,
                          const smfArray *qua, dim_t qcount[SMF__NQBITS],
                          dim_t * ngoodbolo, dim_t * nmap, dim_t *nmax, dim_t * ntslice, dim_t * ntgood,
                          dim_t * tbound, dim_t *tpad, int * status );

void smf_qualstats_report( ThrWorkForce *wf, msglev_t msglev, smf_qfam_t qfamily, int nopad,
                           const smfArray *qua, dim_t last_qcount[SMF__NQBITS],
                           dim_t *last_nmap, int init, dim_t *ngood_tslice,
                           dim_t *numdata, double *exptime, int *status );

double smf_quick_noise( const smfData *data, dim_t bolo, dim_t nsamp, dim_t nchunk,
                        smf_qual_t mask, int *status );

double smf_raw2current( smfHead *hdr, int *status );

AstMapping *smf_rebin_totmap( smfData *data, dim_t itime,
                              AstSkyFrame *abskyfrm,
                              AstMapping *oskymap, int moving,
                              fts2Port fts_port, int *status );

void smf_rebincube( ThrWorkForce *wf, smfData *data, int first, int last,
                    dim_t *ptime, int badmask, int is2d, AstSkyFrame *abskyfrm,
                    AstMapping *oskymap, AstFrame *ospecfrm,
                    AstMapping *ospecmap, Grp **detgrp, int moving, int usewgt,
                    dim_t lbnd_out[ 3 ], dim_t ubnd_out[ 3 ], int spread,
                    const double params[], int genvar, float *data_array,
                    float *var_array, double *wgt_array, float *texp_array,
                    float *teff_array, double *fcon, int64_t *nused, dim_t *nreject,
                    dim_t *naccept, int *status );

void smf_rebincube_ast( ThrWorkForce *wf, smfData *data, int first, int last,
                        dim_t *ptime, dim_t nchan, dim_t ndet, dim_t nslice,
                        dim_t nel, dim_t nxy, dim_t nout, dim_t dim[3],
                        AstMapping *ssmap, AstSkyFrame *abskyfrm,
                        AstMapping *oskymap, Grp **detgrp, int moving,
                        int usewgt, int spread, const double params[],
                        int genvar, double tfac, double fcon,
                        float *data_array, float *var_array,
                        double *wgt_array, float *texp_array,
                        float *teff_array, int *good_tsys, int64_t *nused,
                        int *status );

void smf_rebincube_init( int is2d, dim_t nxy, dim_t nout, int genvar,
                         float *data_array, float *var_array,
                         double *wgt_array, float *texp_array,
                         float *teff_array, int64_t *nused, int *status );

void smf_rebincube_nn( ThrWorkForce *wf, smfData *data, int first, int last,
                       dim_t *ptime, dim_t nchan, dim_t ndet, dim_t nslice,
                       dim_t nxy, dim_t nout, dim_t dim[3],
                       int badmask, int is2d, AstMapping *ssmap,
                       AstSkyFrame *abskyfrm, AstMapping *oskymap,
                       Grp **detgrp, int moving, int usewgt, int genvar,
                       double tcon, double fcon, float *data_array,
                       float *var_array, double *wgt_array, float *texp_array,
                       float *teff_array, dim_t *nused, dim_t *nreject,
                       dim_t *naccept, int *good_tsys, int *status );

void smf_rebincube_norm2d( dim_t nout, dim_t nxy, int genvar,
                           float *data_array, float *var_array,
                           double *wgt_array, dim_t *pop_array, int *status );

void smf_rebincube_norm3d( dim_t nout, int genvar, int64_t nused, float *data_array,
                           float *var_array, double *wgt_array, int *status );

int smf_rebincube_paste2d( int badmask, dim_t nchan, dim_t nchanout,
                           dim_t *spectab, dim_t *specpop, dim_t iv0,
                           dim_t nxy, double wgt, int genvar,
                           double invar, float *ddata,
                           float *data_array, float *var_array,
                           double *wgt_array, dim_t *pop_array,
                           int64_t *nused, dim_t *nreject, dim_t *naccept,
                           float *work, int *status );

int smf_rebincube_paste3d( dim_t nchan, dim_t nout, dim_t *spectab, dim_t iv0,
                           dim_t nxy, double wgt, int genvar, double invar,
                           float *pdata, float *data_array,
                           float *var_array, double *wgt_array, dim_t *nused,
                           int *status );

void smf_rebincube_paste_thread( void *data, int *status );

void smf_rebincube_seqf( ThrWorkForce *workforce, int nthreads,
                         double *blk_bot, AstMapping *this, double wlim,
                         int ndim_in, const dim_t lbnd_in[], const dim_t ubnd_in[],
                         const float in[], const float in_var[], int spread,
                         const double params[], int flags, double tol,
                         int maxpix, float badval, int ndim_out,
                         const dim_t lbnd_out[], const dim_t ubnd_out[],
                         const dim_t lbnd[], const dim_t ubnd[], float out[],
                         float out_var[], double weights[], int64_t *nused,
                         int *status );

void smf_rebincube_spectab( dim_t nchan, dim_t nchanout, AstMapping *ssmap,
                            dim_t **pspectab, int *status );

const double *smf_rebincube_tcon( smfHead *hdr, dim_t itime, double fcon,
                                  float *texp, float *teff, double *tcon,
                                  int *status );

void smf_rebincom( ThrWorkForce *wf, smfData *comdata, smfData *gaidata,
                   smfData *noi, smf_qual_t *qual, smfData *lutdata, int flags,
                   double *map, double *mapwgt, double *mapwgt2, double *mapvar,
                   dim_t msize, dim_t gain_box, int *status );

void smf_rebinmap( ThrWorkForce *wf, smfData *data, double *bolovar,
                   int index, int size, AstFrameSet *outfset, int spread,
                   const double params[], int moving, int genvar, dim_t *lbnd_out,
                   dim_t *ubnd_out, double *map, double *variance,
                   double *weights, int64_t *nused, fts2Port fts_port,
                   int *status );

void smf_rebinmap1( ThrWorkForce *wf, smfData *data, smfData *variance, int *lut,
                    dim_t tslice1, dim_t tslice2, int trange,
                    int *whichmap, dim_t nmap, smf_qual_t mask, int sampvar,
                    int flags, double *map, double *mapweight,
                    double *mapweightsq, int *hitsmap, double *mapvar,
                    dim_t msize, double chunkfactor, double *scalevariance,
                    int *status );

void smf_rebinseq_thread( void *data_ptr, int *status );

void smf_rebinslices( void *job_data_ptr, int *status );

void smf_rebinsparse( smfData *data, int first, dim_t *ptime, AstFrame *ospecfrm,
                      AstMapping *ospecmap, AstSkyFrame *oskyframe,
                      Grp **detgrp, dim_t lbnd_out[ 3 ], dim_t ubnd_out[ 3 ],
                      int genvar, float *data_array, float *var_array,
                      int *ispec, float *texp_array, float *ton_array,
                      double *fcon, int *status );

void smf_reduce_dark( const smfData *indark, smf_dtype dtype,
                      smfData **outdark, int *status );

void smf_remove_grp_metadata( Grp *grp, const char *name, int *status );

void smf_reorder( const char *type, void *in, int len, int ndim, dim_t *dims,
                  int axis, dim_t *index, int maxis, dim_t *mask, void *out,
                  int *status );

void smf_reportprogress( dim_t max, int *status );

void smf_request_mask( ThrWorkForce *wf, const char *param, smfArray ** bpms, int *status);

void smf_resampcube( smfData *data, AstSkyFrame *abskyfrm, AstMapping *iskymap,
                     AstFrame *ispecfrm, AstMapping *ispecmap,
                     Grp *detgrp, int moving, dim_t slbnd[ 3 ],
                     dim_t subnd[ 3 ], int interp, const double params[],
                     float *in_data, float *out_data, int *overlap,
                     int *status );

void smf_resampcube_ast( smfData *data, dim_t nchan,
                         dim_t ndet, dim_t nslice, dim_t nel,
                         dim_t dim[3], AstMapping *ssmap,
                         AstSkyFrame *abskyfrm, AstMapping *iskymap,
                         Grp *detgrp, int moving, int interp,
                         const double params[], float *in_data,
                         float *out_data, int *status );

void smf_resampcube_copy( dim_t nchan, dim_t *spectab,
                          dim_t iv0, dim_t nxy, float *ddata,
                          float *in_data, int *status );

void smf_resampcube_nn( smfData *data, dim_t nchan,
                        dim_t ndet, dim_t nslice, dim_t nxy,
                        dim_t dim[3], AstMapping *ssmap,
                        AstSkyFrame *abskyfrm, AstMapping *iskymap,
                        Grp *detgrp, int moving, float *in_data,
                        float *out_data, int *overlap, int *status );

void smf_resampmap( ThrWorkForce *wf, smfData *data, AstSkyFrame *abskyfrm,
                    AstMapping *sky2map, int moving, dim_t slbnd[ 2 ],
                    dim_t subnd[ 2 ], int interp, const double params[],
                    double sigma, double perror, double *in_data, double *out_data,
                    double *ang_data, dim_t *ngood, int *status );

void smf_reshapendf( smfData **data, smfTile *tile, int *status );

void smf_rolling_fit( dim_t box, float wlim, dim_t el, dim_t start,
                      dim_t end, const double *dat, double *grad,
                      double *off, double *rms, int *status );

int smf_samedims_smfData( const smfData *data1, const smfData *data2,
                          int *status );

void smf_scale2freq( double f_edgesmall, double f_edgelarge, const smfHead *hdr,
                     double *f_edgelow, double *f_edgehigh, int *status );

void smf_scale_bols( ThrWorkForce *wf, smfData *data, const smfData * scaledata,
                     const char *path, const char *param, int div, int *status );

void smf_scalar_multiply( smfData * data, double dscalar, int * status );

void smf_select_pntr( void *const pntr[2], smf_dtype dtype, double **ddata,
                      double **dvar, int **idata, int **ivar, int *status );

const smf_qual_t *
smf_select_cqualpntr( const smfData * data, smf_qfam_t * qfamily, int * status );

smf_qual_t * smf_select_qualpntr( smfData * data, smf_qfam_t * qfamily, int * status );

void smf_set_clabels( const char title[], const char label[],
                      const char units[], smfHead* hdr, int * status );

void smf_set_moving( AstFrame *wcs, AstFitsChan *fchan, int *status );

void smf_smfFile_msg( const smfFile * file, const char token[],
                      int strip, const char fallback[] );

double *smf_smoothmask( ThrWorkForce * wf, smf_qual_t qual, const smf_qual_t *mapqual, int
                        dim0, int dim1, AstFrameSet *fset, double fwhm,
                        double low, int *status );

void smf_snrmask( ThrWorkForce *wf, int abssnr, unsigned char *oldmask, const double *map,
                  const double *mapvar, const dim_t *dims, double snr_hi,
                  double snr_lo, unsigned char *mask, int *status );

int smf_sort_bydouble ( const void *in1, const void *in2 );

void smf_sparsebounds( ThrWorkForce * wf, Grp *igrp,  int size, AstSkyFrame *oskyframe,
                       int usedetpos, Grp *detgrp, dim_t lbnd[ 3 ], dim_t ubnd[ 3 ],
                       AstFrameSet **wcsout, int *hasoffexp, int *polobs,
                       int *status );

int smf_spreadwidth( int spread, const double params[], int *status );

void smf_startup( smfData *data, dim_t startup, int *status );

void smf_store_image( smfData *data, HDSLoc *scu2redloc, int cycle, int ndim,
                      dim_t dims[], int nsampcycle, int vxmin, int vymin,
                      double *image, double *zero, int *status);

void smf_store_outputbounds (int updatepars, const dim_t lbnd_out[3],
                             const dim_t ubnd_out[3], AstFrameSet *wcsout,
                             AstSkyFrame *oskyfrm, AstMapping *oskymap, int *status);

void smf_stripsuffix( const char *instr, const char *suffix, char *outstr,
                      int *status );

AstKeyMap *smf_subinst_keymap( smf_subinst_t subinst, const smfData * indata,
                               const Grp * igrp, int index, int * status );

const char * smf_subinst_str( smf_subinst_t subinst, int * status );

void smf_subip(  ThrWorkForce *wf, smfDIMMData *dat, AstKeyMap *keymap,
                 double chunkfactor, int *ispol2, int *status );

void smf_subtract_dark ( smfData * indata, const smfData * dark1,
                         const smfData * dark2, smf_dark_sub_meth method,
                         int *status );

void smf_subtract_plane( smfData *data, smfArray *array, const char *fittype,
                         int *status);

void smf_subtract_plane1( smfData *data, const char *fittype, double *meansky,
                          int *status);

void smf_subtract_plane2( smfArray *array, const char *fittype, double *meansky,
                          int *status);

void smf_subtract_plane3( ThrWorkForce *wf, smfData *data,
                          const dim_t mdims[],
                          const int lut[], int * status );

void smf_subtract_poly( smfData *data, int rel, int *status );

void smf_summarize_obs( const Grp * igrp, int * status );

void smf_svd( ThrWorkForce *wf, dim_t n, double *a, double *sigma,
              double *u, double eps, int sort, int *status );

const char * smf_swmode_str( smf_swmode mode, int * status );

double
smf_tai2unix( double tai, int * status );

const char * smf_tausrc_str( smf_tausrc mode, int * status );

void smf_telpos_get( smfHead * hdr, int * status );

void smf_terr( double phi, double h, double lambda, double pos[3] );

void smf_timerinit( struct timeval *tv1, struct timeval *tv2, int *status);

double smf_timerupdate( struct timeval *tv1, struct timeval *tv2, int *status);

double *smf_tophat2( ThrWorkForce *wf, const double *map, const dim_t dims[2],
                     dim_t box, int sub, double wlim, int niter, int *status );

void smf_tslice_ast (smfData * data, dim_t index, int needwcs, fts2Port fts_port,
                     int * status );

void smf_tswcsOrder( AstFrameSet **tswcs, int isTordered, int *status );

void smf_uncalc_iqu( ThrWorkForce *wf, smfData *data, double *idata,
                     double *qdata, double *udata, double *angdata,
                     int pasign, double paoff, double angrot, double amp2,
                     double phase2, double amp4, double phase4, double amp16,
                     double phase16, int ipmodel, const double *pl1data,
                     const double *qinst, const double *uinst,
                     const double *c0, const double *p0, const double *p1,
                     const double *angc, int harmonic, double offset, int *status );

void smf_update_quality( ThrWorkForce *wf, smfData *data, int syncbad,
                         const int *badmask, smf_qual_t addqual, double badfrac,
                         int *status );

void smf_update_valbad( smfData *data, smf_modeltype mtype, const smf_qual_t *qual,
                        dim_t qbstride, dim_t qtstride, smf_qual_t mask,
                        int *status );

void smf_updateprov( int ondf, const smfData *data, int indf,
                     const char *creator, NdgProvenance ** modprov, int *status );

int smf_validate_smfData( const smfData * data, int hashdr, int hasfile,
                          int *status );

int smf_validate_smfHead( const smfHead * hdr, int hasfits, int hasstate,
                          int *status );

int smf_validate_tcs_position( smfHead* hdr, double tolerance, int setbad, int* status );

void smf_whiten( double *re, double *im, double df, dim_t nf, dim_t box,
                 int complement, int *status );

void smf_write_bolomap( ThrWorkForce *wf, smfArray *res, smfArray *lut,
                        smfArray *qua, smfDIMMData *dat, dim_t msize,
                        const Grp *bolrootgrp, int varmapmethod,
                        const dim_t *lbnd_out, const dim_t *ubnd_out,
                        AstFrameSet *outfset, const char *root,
                        double chunkfactor, int *status );

void smf_write_bolotable( const smfData *data, const char *filename,
                          dim_t ibolo, const dim_t *lbnd, const dim_t *dims,
                          int *status );

void smf_write_clabels( const smfData* data, int * status );

void smf_write_flagmap( ThrWorkForce *wf, smf_qual_t mask, smfArray *lut, smfArray *qua,
                        smfDIMMData *dat, const Grp *flagrootgrp,
                        dim_t contchunk, const dim_t *lbnd_out,
                        const dim_t *ubnd_out, AstFrameSet *outfset,
                        int *status );

void smf_write_itermap( ThrWorkForce *wf, const double *map, const double *mapvar,
                        const smf_qual_t *mapqua, dim_t msize,
                        const Grp *iterrootgrp, dim_t contchunk, int iter,
                        const dim_t *lbnd_out, const dim_t *ubnd_out,
                        AstFrameSet *outfset, const smfHead *hdr,
                        const smfArray *qua, int *status );

void smf_write_sampcube( ThrWorkForce *wf, const smfArray *res, const smfArray *lut,
                         const smfArray *qua, const smfDIMMData *dat,
                         const int *hits, const Grp *samprootgrp,
                         dim_t contchunk, const dim_t *lbnd, const dim_t *ubnd,
                         int *status );

void smf_write_shortmap( ThrWorkForce *wf, dim_t shortmap, double cycleperiod, double cyclestart,
                         smfArray *res, smfArray *lut,
                         smfArray *qua, smfDIMMData *dat,
                         dim_t msize, const Grp *shortrootgrp, dim_t contchunk,
                         int varmapmethod, const dim_t *lbnd_out,
                         const dim_t *ubnd_out, AstFrameSet *outfset,
                         double chunkfactor, int *status );

void smf_write_smfData ( ThrWorkForce *wf, const smfData *data, const smfData *variance,
                         const char * filename, const Grp * igrp, dim_t grpindex,
                         int provid, msglev_t msglev, int single,
                         void (*func)(ThrWorkForce *wf,int indf,void *info,int *status),
                         void *info, int * status );

void smf_write_smfFilter( ThrWorkForce *wf, const smfFilter *filt, const char *filename,
                          const Grp * igrp, dim_t grpindex,
                          int *status );

void smf_twobeam( ThrWorkForce *wf, double *array, dim_t nx, dim_t ny, double pixsize,
                  double *cx, double *cy, double radius, const char *log,
                  int fitback, int fittwo, double *a1, double *a2, double *fwhm1,
                  double *fwhm2, double *back, double *model, double *rms,
                  int *status );


