#!/usr/bin/env starperl

=head1 NAME

print_index - Provide a listing of SCUBA-2 or ACSIS data files in a directory

=head1 SYNOPSIS

  scuba2_index  [-v | -h | -d | -o] [-a] [-c] [-e] [-f] [datadir] [scuba2_array]
  acsis_index   [-v | -h | -d | -o] [-a] [-c] [-e] [-f] [-t/T -r/R -s/S]
                  [datadir]

=head1 DESCRIPTION

Script to read JCMT observation files in a directory and create an
index, a table with the basic information on the files. Can be
invoked as C<acsis_index> (default) or C<scuba2_index> depending on the
desired instrument listing.

=head1 OPTIONS

The following options are supported:

=over 4

=item B<-all>

Print information on all files even if the headers are identical. For example,
include multiple subbands (subsystems) and sub-scans.

=item B<-debug>

Print debugging information.

=item B<-extended>

Print extended lines. Can add AZ, EL, pointing offsets and bandwidth.

=item B<-force>

Force a subdirectory search. If no files are found in the directory itself, as
would be the case for a raw data tree, the program will automatically search subdirecties.
This option forces the subdirectory search.

=item B<-help>

Print help information.

=item B<-man>

Print the full documentation to STDOUT.

=item B<-ocscfg>

Print the OCS configuration XML file.

=item B<-cal>

Only print calibration observations.

=item B<-version>

Print version information.

=back

ACSIS-specific options:

=over 4

=item B<-skip>

Skip observation information when printing Tsys or Trx

=item B<-stdev>

Include the standard deviation when printing Tsys or Trx.

=item B<-trx>

Print median receiver temperature.

=item B<-tsys>

Print median system temperature.

=back

=head1 ARGUMENTS

The primary argument is the data directory to index. If a yyyymmdd string is
given it will default to the SCUBA-2/ACSIS data for the specified data unless
there is a local subdirectory named yyyymmdd. Will default to the value of the
$DATADIR environment variable if set.

C<scuba2_index> can take a specific sub-array directory to index. Defaults to s8d.

=cut

use strict;
use warnings;

use File::Basename;
use File::Find;
use File::Spec;
use DateTime;
use Cwd;

# Load in the SDF module
use Astro::FITS::Header::NDF;
use Astro::FITS::HdrTrans qw/ translate_from_FITS /;
use NDF;

# Astrometry
use Starlink::AST;

# Load in the GSD module
use GSD;

# Option handling
use Getopt::Long;
use Pod::Usage;

# Smurf command GETTSYS is used for some options
my $tsyscmd;
if (exists $ENV{SMURF_DIR} && defined $ENV{SMURF_DIR}) {
    $tsyscmd = $^X. " ". File::Spec->catfile( $ENV{SMURF_DIR},
                                              "gettsys" )
}

# ----------------------------------------------------------------------
# Parse the command line options

our $VERSION = "2.0";

# ORAC_DATA_ROOT is a global override
my $root = "/jcmtdata";
if (exists $ENV{ORAC_DATA_ROOT} && -d $ENV{ORAC_DATA_ROOT}) {
  print "Using ORAC_DATA_ROOT override value of $ENV{ORAC_DATA_ROOT}\n";
  $root = $ENV{ORAC_DATA_ROOT};
}

my $acsis_root = File::Spec->catdir( $root, "raw/acsis/spectra");

my $default_array = "s8d";
my $scuba2_root  = File::Spec->catdir($root, "raw/scuba2",${default_array});

# Store the arguments for debugging purposes
my @args = @ARGV;

my ($help, $man, $doversion, $debug, $extended, $ocscfg, $force, $prtall);
my ($cal_only, $skip, $tsys, $trx, $stdev);
my $use_scuba2;
my $result = GetOptions(
                        "help" => \$help,         # Help text
                        "man"   => \$man,         # Manual page
                        "version" => \$doversion, # Version information
                        "debug" => \$debug,       # Debugging (debug = 2 prints header items)
                        "extended" => \$extended, # Print extended lines?
                        "ocscfg" => \$ocscfg,     # Print ocs config file
                        "force" => \$force,       # Force subdirectory search
                        "all" => \$prtall,        # Print info on all files even if headers identical
                        # ACSIS
                        "cal" => \$cal_only,      # Only print calibration observations
                        "skip" => \$skip,         # Skip obs-info (for Tsys/Rrx-only listing)
                        "tsys" => \$tsys,       # Print median Tsys
                        "trx"  => \$trx,        # Print median Trx
                        "stdev" => \$stdev,       # Include standard deviation for Tsys and Trx
                        # Explicit mode switching
                        "scuba2" => \$use_scuba2,     # Choose scuba-2 mode
                       );

my $prog = basename($0);
$prog = "scuba2_index" if $use_scuba2;

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose =>2) if $man;
if ($doversion) {
  print "\n\t$prog --- version $VERSION\n";
  print "\tCreate an index of the files in \$DATADIR\n";
  print "\tContact Remo Tilanus (rpt\@jach.hawaii.edu) for more information\n\n";
  exit;
}

# Provide output from SCUBA or HETERODYNE data (default):
my $data_root = ( $prog =~ /scuba/ ? $scuba2_root : $acsis_root );

# Handle Mac mounting
if (!-d $data_root) {
  my $alt_root = File::Spec->catdir( "/Volumes", $data_root);
  $data_root = $alt_root if -d $alt_root;
}

# Print extended lines?
my $pformat = ( $extended ? "LONG" : "SHORT");

my $tsysrms = 0;
my $trxrms = 0;

if ( $prog !~ /scuba/ ) {
  # Print Tsys?
  if ($tsys && $stdev) {
    $tsysrms = 1;
  }

  # Print Trx?
  if ($trx && $stdev) {
    $trxrms = 1;
  }

}

# Create string of arguments
my $sw = join( " ", grep { $_ !~ /^\-scu/i } @args);
print "Running: ${prog} $sw\n" if ($debug);

if ($skip && !($tsys || $trx) ) {
  print "\n*ERROR*: -skip is only valid with -tsys and/or -trx";
  pod2usage(1);
  exit;
}

# ----------------------------------------------------------------------
# Command-line arguments

my $datadir = $ENV{DATADIR};            # The default data directory

# Get observation directory and (optional) scuba array from arguments
my $scuba2_array = $default_array;
my $i = $#ARGV;
for my $arg (reverse @ARGV) {
  chomp($arg);
  print "ARGV ${i}: $arg\n" if ($debug);
  if ( $arg =~ /^s\d\w/i ) {
    $scuba2_array = $arg;
  } else {
    $datadir = $arg;
  }
  $i--;
}

$datadir = File::Spec->catdir( $data_root, $datadir )
     if ( defined $datadir && $datadir =~ /^\d{8}$/ && not -e $datadir);

# Fallback to current directory
if (!$datadir) {
    chomp($datadir = getcwd());
}

# Replace any array string with the requested one:
$datadir =~ s/$default_array/$scuba2_array/
            if ($default_array ne $scuba2_array);

$datadir =~ s/\/$//;

print "Path: $datadir   Files: all\n" if ($debug);
my @obsfiles;

# Pattern matches for certain types of file
my $SCU2PATT = qr/s\d\w\d{8}_\d{5}_\d{4}/;
my $NONSCU2PATT = qr/dem_|obs_|cbe_|das_|ac\d{8}_\d{5}|a\d{8}_\d{5}|\@/;
my $FILSUFPATT = qr/\.(sdf|data|gsd|dat)$/;

# and determine which one to use
my $FILE_PATTERN = ( $prog =~ /scuba/ ? $SCU2PATT : $FILSUFPATT );

opendir( my $DIR,$datadir ) or die "Can't open directory '${datadir}'! :\n\t $!\n";
my @ofiles = sort grep { /$FILE_PATTERN/ } grep { /$FILSUFPATT/ } readdir($DIR);
closedir($DIR);

# If: Found valid files in the flat directory
if (@ofiles > 0 && !$force) {
  print "Found ". @ofiles . " files in ${datadir}\n" if ($debug);
  foreach my $of (@ofiles) {
    push(@obsfiles, File::Spec->catfile($datadir,$of));
  }

# Else: Try to find spectra-like files in subdirs
} else {
  if ($debug) {
    print "Forced subdir search: " if ($force);
    print "No files found: " unless ($force);
    print " try scanning subdirs of ${datadir}\n";
  }
  # We want to look for relevant files in the directory tree
  # We do not want to bother reading many many SCUBA-2
  # files that will have almost identical headers so
  # we restrict the basic pattern to the first subscan
  # This speeds things up significantly for SCUBA-2
  sub wanted {
    return if -d $File::Find::name;
    return unless /$FILSUFPATT/;
    return unless /_0001\.sdf$/;
    push @obsfiles, $File::Find::name if /$FILE_PATTERN/;
  }
  find(\&wanted, $datadir);
  @obsfiles = sort @obsfiles;
}

my $origin = "";
$origin = $1 if $datadir =~ /[1,2][9,0,1](\d{6})/;

#-----------------------------------------------------------------------
# Handle each file

# in case obs_... gsd files sort by scan number
if (@obsfiles && $obsfiles[0] !~ /sdf$/) {
  print "Sorting files...\n" if $debug;
  my @unsorted = @obsfiles;
  @obsfiles = sort sort_by_scan @unsorted;
}

my $prev_obs = "";

my @suffixlist = ( "sdf", "dat", "gsd" );

foreach my $obsfile ( @obsfiles )
{

  (my $basename,my $path,my $suffix) = fileparse($obsfile,@suffixlist);

format NOFITS =
--------- No FITS entry for @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$basename
.

  $basename =~ s/\.$//;
  $path =~ s/\/$//;
  print "File $basename, Suffix: $suffix, Path: $path\n" if ($debug);

  my $cur_obs = "";
  # ..and recover the PROJECT_ID and update INDEX.
  if ( "$suffix" eq "sdf" || "$suffix" eq "" ) {
      $cur_obs = sdf_header ( $path, $basename, $suffix,
                 $prev_obs, $pformat, $debug);
  } else {
      $cur_obs = gsd_header ( $path, $basename, $suffix,
                 $prev_obs, $pformat, $debug);
  }

  $prev_obs = $cur_obs;
}

exit;

# ---------------------- SUBROUTINES -----------------------------------

# Sort routine for GSD data
sub sort_by_scan {
    (split(/\_/,(split(/\./,$a))[0]))[-1] <=>
    (split(/\_/,(split(/\./,$b))[0]))[-1];
};


# Read a FITS header and return a hash reference
sub read_fits_header {
  my $file = shift;
  # Read the FITS header and tie it
  my $fitshdr = Astro::FITS::Header::NDF->new( File => $file );
  if (!$fitshdr) {
    print "Error reading FITS in $file\n";
    return;
  }
  my %tiedhdr;
  tie %tiedhdr, "Astro::FITS::Header", $fitshdr, tiereturnsref => 1;
  return \%tiedhdr;
}

# ----------------------------------------------------------------------
# Handle a SDF file, find out if SCUBA or ACSIS

sub sdf_header {

    my ($path, $basename, $suffix, $prev_obs, $pformat, $debug) = @_;
    my $sdffile = File::Spec->catfile($path, $basename);
    my $fitsitem = read_fits_header( $sdffile );
    return "" unless defined $fitsitem;

    # Assume we have problems if the fits header has fewer than
    # five entries
    my @keys = keys %$fitsitem;
    return "" unless @keys > 5;

# Branch between SCUBA, SCUBA2 and ACSIS

    my $cur_obs = "";

    if ($fitsitem->{INSTRUME} =~ /^scuba$/i) {
      print "SCUBA observation\n" if ($debug);
      $cur_obs =
         scuba_header($path, $basename, $suffix,
                      $fitsitem, $prev_obs, $pformat, $debug);
    } elsif ($fitsitem->{INSTRUME} =~ /^scuba-2$/i) {

      print "SCUBA-2 observation\n" if ($debug);

      my $fitsitem2;

      # No need to scan the directory for these types with abrev. headers
      if ( $fitsitem->{OBS_TYPE} =~ /^ramp$/i or
           $fitsitem->{OBS_TYPE} =~ /^setup$/i or
           ($fitsitem->{OBS_TYPE} =~ /^noise$/i and
            defined $fitsitem->{'OBJECT'} and
            $fitsitem->{OBJECT} =~ /^dark$/i ) ) {

        print "Read header non-science file: $sdffile\n" if ($debug);
        $fitsitem2 = $fitsitem;

      } else {

        # Find sub-files of observation
        opendir( my $ODIR,"${path}" ) or die "Can't open observation '${path}'! : $!\n";
        my @subfiles = sort
            grep( /s\d\w\d{8}_\d{5}_\d{4}/,grep(/sdf/, readdir($ODIR)) );
        closedir($ODIR);

        # Try reading the first "science" file
        my $listfirst = 0;
        my $found = 0;
        while ( $found == 0 && $listfirst <= $#subfiles ) {
          my $basename = $subfiles[$listfirst];
          $basename =~ s/\.sdf$//;
          my $sdffile = File::Spec->catfile($path, $basename);
          print "Read header first science file: $sdffile" if ($debug);
          $fitsitem = read_fits_header( $sdffile );
          if (defined $fitsitem) {
            $found = 1 if ( $fitsitem->{AZSTART} && $fitsitem->{ELSTART} );
            print " ... (FOUND= $found)\n" if($debug);
	  }
          $listfirst++;
        }

        # Try reading the last "science" file as well
        $fitsitem2 = $fitsitem;

        if ( $found ) {

          my $listlast = $#subfiles;
          $found = 0;
          while ( $found == 0 && $listlast > 0 ) {
            my $basename2 = $subfiles[$listlast];
            $basename2 =~ s/\.sdf$//;
            my $sdffile2 = File::Spec->catfile($path, $basename2);
            print "Read header last science file: $sdffile2" if ($debug);
            $fitsitem2 = read_fits_header( $sdffile2 );
            if (defined $fitsitem2) {
              $found = 1 if ( $fitsitem2->{AZEND} && $fitsitem2->{ELEND} );
              print " ... (FOUND= $found)\n" if($debug);
	    }
            $listlast--;
          }
        }
      }

      $cur_obs =
         scuba2_header($path, $basename, $suffix, $fitsitem,
                       $fitsitem2, $prev_obs, $pformat, $debug);

    } else {

      print "ACSIS observation\n" if ($debug);
      $cur_obs =
         acsis_header($path, $basename, $suffix, $fitsitem,
                      $prev_obs, $pformat, $debug);
    }

    return($cur_obs);
}

# ----------------------------------------------------------------------
# Get project info from an ACSIS file

sub acsis_header {

    my ($path, $basename, $suffix, $fitsitem, $prev_obs, $pformat, $debug) = @_;
    my $sdffile = File::Spec->catfile($path, $basename);

    # Get the rest frequency
    my $status = &NDF::SAI__OK;
    err_begin($status);
    ndf_begin();
    ndf_find( NDF::DAT__ROOT, $sdffile, my $indf, $status);

    my $wcs = ndfGtwcs( $indf, $status );
    ndf_annul( $indf, $status );
    ndf_end( $status );
    err_end($status);

    $fitsitem->{RESTFREQ} = 0;
    eval {
      $fitsitem->{RESTFREQ} = $wcs->Get( "restfreq" );
    };
    # Use "stdofrest" to get the velocity standard of rest
    # source velocity in the DOPPLER system
    my $sourcesys = "VRAD";
    if ($fitsitem->{DOPPLER}) {
      if ($fitsitem->{DOPPLER} =~ /rad/i) {
        $sourcesys = "VRAD";
      } elsif ($fitsitem->{DOPPLER} =~ /opt/) {
        $sourcesys = "VOPT";
      } elsif ($fitsitem->{DOPPLER} =~ /red/) {
        $sourcesys = "REDSHIFT";
      }
    }
    if ( $fitsitem->{RESTFREQ} > 0 ) {
      $wcs->Set( sourcesys => $sourcesys );
      $fitsitem->{VELOCITY} = $wcs->Get("sourcevel" );
    } else {
      $fitsitem->{VELOCITY} = 0;
    }
    if (!exists $fitsitem->{SPECSYS}) {
      eval {
        $fitsitem->{SPECSYS} = $wcs->Get( "sourcevrf" );
      };
    }

    do {foreach (keys %$fitsitem) { print "$_\n";}} if (defined $debug && $debug > 1);

    my $rx     = lc($fitsitem->{INSTRUME});
    $rx     =~ s/^fe_//;
    $rx     =~ s/^rx//i;
    $rx     = sprintf('%.2s', $rx);
    my $freq   = sprintf("%.1f", $fitsitem->{RESTFREQ});
    my $cfreq  = "${rx}/${freq}";
    my $fmt = '%.2f';
    if ($fitsitem->{VELOCITY} < 0.0 ) {
      $fmt = '%.1f';
    }
    if ($fitsitem->{VELOCITY} > 100.0 ) {
      $fmt = '%.1f';
    }
    if ($fitsitem->{VELOCITY} > 1000.0 ) {
      $fmt = '%.0f';
    }
    my $vel = sprintf($fmt, $fitsitem->{VELOCITY});
    my $cvref  = "$vel" . "/" . substr(lc($fitsitem->{DOPPLER}),0,3) .
              substr(lc($fitsitem->{SPECSYS}),0,3);
    my $bwmode = $fitsitem->{BWMODE};

    # Back of the envelope integration time estimate
    my $step = $fitsitem->{STEPTIME};
    my $josmult = (defined $fitsitem->{JOS_MULT} ? $fitsitem->{JOS_MULT} : 0);
    my $josmin = (defined $fitsitem->{JOS_MIN} ? $fitsitem->{JOS_MIN} : 0);
    $josmult = ( $josmult > $josmin ? $josmult : $josmin );
    my $numnods = ( defined $fitsitem->{NUM_NODS} ? 4*$fitsitem->{NUM_NODS} : 1 );
    my $intt = ((defined $fitsitem->{NUM_CYC} and defined $step)
      ? 0.1*int(10.0*$fitsitem->{NUM_CYC}*$numnods*$josmult*$step+0.5)
      : 'n/a');
    $step //= 'n/a';

    my %A = calc_shared_scuba2_acsis( $fitsitem, $fitsitem );

    my $mode = $A{OBSTYPE};
    if ($mode =~ /science/i) {
      $mode = uc($fitsitem->{SAM_MODE}) . "_" . uc($fitsitem->{SW_MODE});
      $mode =~ s/JIGGLE/JIG/;
      $mode =~ s/RASTER/RAS/;
      $mode =~ s/GRID/GRD/;
    }

    my $mode_extra = '-';
    if ($mode =~ /focus/i) {
      $mode_extra = $fitsitem->{'FOCAXIS'};
    }
    elsif ($mode =~ /pointing/i) {
      my $n = $fitsitem->{'JIGL_CNT'};
      unless (defined $n) {
        $mode_extra = '?';
      }
      elsif ($n < 10) {
        $mode_extra = $n;
      }
      else {
        $mode_extra = 'M';
      }
    }

#    print "$A{RUN} $mode $A{UT} \'$A{OBJECT}\' $A{PROJECT} $rx $boloms $filter $A{CSOTAU} $A{SEEING}\n";

    # Declare formats here since it has to be in scope of the lexical variables
format STDOUT_SHORT_ACS =
@<<<<< UT Projid   Mode    InB Source Intt/Stp  Tau  WVM  Rx/Freq   Vel/Velsys D
$origin
.

format STDOUT_LONG_ACS =
@<<<<< UT Projid   X Mode     InBeam Source               Intt/Stp   Tau   WVM  Rx/Freq   Vel/Velsys Dome    Az    El   Uaz    Uel  Bwmode       Simulate
$origin
.

format SHORT_ACS =
@<< @<<<< @<<<<<<< @<<<<<< @<< @<<<<< @>>>/@<< @<<< @<<< @<<<<<<< @>>>>>>>>>>> @
$A{RUN}, substr($A{UT},0,5), $A{PROJECT}, $mode, $A{INBEAM}, $A{OBJECT}, $intt, $step, $A{CSOTAU}, $A{WVMTAU}, $cfreq, $cvref, $A{DOMESTATE}
.

format LONG_ACS =
@<< @<<<< @<<<<<<< @ @<<<<<<< @<<<<< @<<<<<<<<<<<<<<<<<<< @>>>/@<< @<<<< @<<<< @<<<<<<< @>>>>>>>>>>> @<<< @<<<< @<<<< @<<<<< @<<<<< @>>>>>>>>>>> @<<<<<<<
$A{RUN}, substr($A{UT},0,5), $A{PROJECT}, $mode_extra, $mode, $A{INBEAM}, $A{OBJECT}, $intt, $step, $A{LCSOTAU}, $A{LWVMTAU}, $cfreq, $cvref, $A{DOMESTATE}, $A{AZ}, $A{EL}, $A{UAZ}, $A{UEL}, $bwmode, $A{SIMULATE}
.

    # Set format

    $= = 999;
    $^ = "STDOUT_${pformat}_ACS";
    $~ = ($mode =~ /^$/ ? "NOFITS" : $mode);

    $~ = "${pformat}_ACS" if ($~ !~ /NOFITS/);

    unless ($skip) {

      if ((not $cal_only) or ($cal_only and  $A{PROJECT} =~ /cal/i)) {
        write if ("$A{RUN}_$A{UT}" ne "${prev_obs}" || ($prtall));
        print "    OCSCFG: $A{OCSCFG}  ($A{OBSTYPE})\n" if $ocscfg;
      }

    }

    &acsis_tsys( $sdffile, $A{PROJECT}, $mode, $A{RUN}, $freq ) if ($tsys or $trx);

    if (!$skip ) {

      if ((not $cal_only) or ($cal_only and  $A{PROJECT} =~ /cal/i)) {

        print "---------------------------------------------------\n"
              if (($ocscfg) or ($tsys or $trx));
      }
    }

    return("$A{RUN}_$A{UT}");
}


# ----------------------------------------------------------------------
# Get project info from an SCUBA-2 file

sub scuba2_header {

    my ($path, $basename, $suffix, $fitsitem, $fitsitem2, $prev_obs, $pformat, $debug) = @_;
    my $sdffile = File::Spec->catfile($path, $basename);
    do {foreach (keys %$fitsitem) { print "$_\n";}} if (defined $debug && $debug > 1);

#    my $filter  = $fitsitem->{FILTER};
#    my $step = int(1000*$fitsitem->{STEPTIME}) . "ms";

    my ($mapx, $mapy);
    my $mpx = $fitsitem->{MAP_WDTH};
    if (defined $mpx) {
      $mpx = int($mpx);
      if ($mpx > 3600.0) {
        $mapx = sprintf "%4.1fd", $mpx/3600.0;
      } elsif ($mpx > 60.0) {
        $mapx = sprintf "%4.1f'", $mpx/60.0;
      } else {
        $mapx = sprintf "%2d\"", $mpx;
      }
    }
    my $mpy = $fitsitem->{MAP_HGHT};
    if (defined $mpy) {
      $mpy = int($mpy);
      if ($mpy > 3600.0) {
        $mapy = sprintf "%4.1fd", $mpy/3600.0;
      } elsif ($mpy > 60.0) {
        $mapy = sprintf "%4.1f'", $mpy/60.0;
      } else {
        $mapy = sprintf "%2d\"", $mpy;
      }
    }
    $mapx =~ s/^\s+// if $mapx;
    $mapy =~ s/^\s+// if $mapy;

    my $map = "    n/a";
    $map = sprintf "%5sx%-5s", $mapx, $mapy if (defined $mapx && defined $mapy);

    my %S = calc_shared_scuba2_acsis( $fitsitem, $fitsitem2 );
    $S{OBJECT} =~ s/_science//;

    # Mode depends on the observation type
    my $mode = $S{OBSTYPE};
    if ($mode =~ /science/i) {
      $mode = uc($fitsitem->{SAM_MODE});
      $mode = uc($fitsitem->{SCAN_PAT}) if ($mode eq "SCAN" && defined $fitsitem->{SCAN_PAT});
      $mode =~ s/CURVY_PONG/CRVYPONG/i;
    } else {
      $mode =~ s/FIELD/FLD/i;
    }

    # Prepend in-beam information to mode unless the shutter is closed
    my $inbeam =  '';
    $inbeam = $S{INBEAM} unless $fitsitem->{SHUTTER} < 0.5;

    my $mode_extra = '-';
    if ($mode =~ /focus/i) {
      $mode_extra = $fitsitem->{'FOCAXIS'};
    }
    elsif ($mode =~ /stare/i and $inbeam =~ /fts/i) {
      my $ftsmode = $fitsitem->{'FTS_MODE'};
      unless (defined $ftsmode) {
        $mode_extra = '?';
      }
      else {
        $mode_extra = $ftsmode;
      }
    }

#    print "$S{RUN} $mode $S{UT} \'$S{OBJECT}\' $S{PROJECT} $rx $boloms $filter $S{CSOTAU} $S{SEEING}\n";


format STDOUT_SHORT_SCU2 =
@<<<<< UT Projid   Mode    InB Source         Map     Secs  Tau    WVM  See Dome
$origin
.

format STDOUT_LONG_SCU2 =
@<<<<< UT Projid   X Mode     InBeam Source                   Map      Secs    Tau    WVM   See Dome      Az    El   Uaz    Uel  Simulate
$origin
.

    # Declare formats here since it has to be in scope of the lexical variables
format SHORT_SCU2 =
@<< @<<<< @<<<<<<< @<<<<<< @<< @<<<<<<<<< @<<<<<<<<<< @<<<< @<<<< @<<< @<<< @<<<
$S{RUN}, substr($S{UT},0,5), $S{PROJECT}, $mode, $inbeam, $S{OBJECT}, $map, $S{OBSTIME}, $S{CSOTAU}, $S{WVMTAU},$S{SEEING},$S{DOMESTATE}
.

format LONG_SCU2 =
@<< @<<<< @<<<<<<< @ @<<<<<<< @<<<<< @<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<< @<<<< @<<<<  @<<<< @<<<< @<<<  @<<<<< @<<<< @<<<<< @<<<<< @<<<<<<
$S{RUN}, substr($S{UT},0,5), $S{PROJECT}, $mode_extra, $mode, $inbeam, $S{OBJECT}, $map, $S{OBSTIME}, $S{LCSOTAU}, $S{LWVMTAU}, $S{LSEEING}, $S{DOMESTATE}, $S{AZ}, $S{EL}, $S{UAZ}, $S{UEL}, $S{SIMULATE}
.

    # Set format

    $= = 999;
    $^ = "STDOUT_${pformat}_SCU2";
    $~ = ($mode =~ /^$/ ? "NOFITS" : $mode);

    $~ = "${pformat}_SCU2" if ($~ !~ /NOFITS/);

    unless ($skip) {

      if ((not $cal_only) or ($cal_only and  $S{PROJECT} =~ /cal/i)) {
        write if ("$S{RUN}_$S{UT}" ne "${prev_obs}" || ($prtall));
        print "    OCSCFG: $S{OCSCFG}  ($S{OBSTYPE}\n" if ($ocscfg);
      }

    }

    if (!$skip) {

      if ((not $cal_only) or ($cal_only and  $S{PROJECT} =~ /cal/i)) {

        print "---------------------------------------------------\n"
              if (($ocscfg) or ($tsys or $trx));
      }
    }

    return("$S{RUN}_$S{UT}");
}


# ----------------------------------------------------------------------
# Get project info from a SCUBA file

sub scuba_header {

    my ($path, $basename, $suffix, $fitsitem, $prev_obs, $pformat, $debug) = @_;
    my $sdffile = File::Spec->catfile($path, $basename);

    do {foreach (keys %$fitsitem) { print "$_\n";}} if (defined $debug && $debug >1);

    my $projid = uc($fitsitem->{PROJ_ID});
    my $run    = lc($fitsitem->{RUN});
    my ($yy,$mm,$dd,$rest) = split(/\:/, $fitsitem->{UTDATE}, 4);
    if ($mm < 10) {$mm = "0$mm"};
    if ($dd < 10) {$dd = "0$dd"};
    (my $h,my $m,my $s,$rest) = split(/\:/, $fitsitem->{UTSTART}, 4);
    if ($h < 10) {$h = "0$h"};
    $s = substr($s,0,5);
    my $datetime = "${yy}/${mm}/${dd} ${h}:${m}:${s}";
    $s = int($s+0.5);
    if ($s < 10) {$s = "0$s"};
    my $ut = "${h}:${m}:${s}";
    my $mode   = uc($fitsitem->{MODE});
    my $object = "$fitsitem->{OBJECT}";
    my $rx     = "SCUBA";
    my $n_meas = lc($fitsitem->{N_MEASUR});
    my $n_int  = lc($fitsitem->{N_INT});
    my $boloms = substr($fitsitem->{BOLOMS},0,10);
    my $filter = lc($fitsitem->{FILTER});
    my $az     = 0.5*($fitsitem->{STRT_AZD}+$fitsitem->{END_AZD});
    my $el     = 0.5*($fitsitem->{STRT_ELD}+$fitsitem->{END_ELD});
    my $uaz    = $fitsitem->{UAZ};
    my $uel    = $fitsitem->{UEL};
    my $seeing = 0.01 * int(100.0*$fitsitem->{SEEING}+0.5);
    my $csotau = 0.01 * int(100.0*$fitsitem->{TAU_225}+0.5);

#    print "$run $mode $ut \'$object\' $projid $rx/$boloms/$filter/ $csotau $seeing\n";

    # Set format
format STDOUT_LONG_SCU =
@<<<<< UT Mode     Projid   Source    Me/Int Tau  See  Filter    Bolometers      Az    El    Uaz    Uel
$origin
.
format STDOUT_SHORT_SCU =
@<<<<< UT Mode     Projid   Source    Me/Int Tau  See  Filter    Bolometers
$origin
.
format SHORT_SCU =
@<< @<<<< @<<<<<<< @<<<<<<< @<<<<<<<< @>/@<< @<<< @<<< @<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<
$run, $ut, $mode, $projid, $object, $n_meas, $n_int, $csotau, $seeing, $filter, $boloms
.
format SHORT_NOISE =
@<< @<<<< @<<<<<<< @<<<<<<< @<<<<<<<< @>/@<< @<<< @<<< @<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<
$run, $ut, $mode, $projid, $fitsitem->{OBJ_TYPE}, $n_meas, $n_int, $csotau, $seeing, $filter, $boloms
.

format SHORT_SKYDIP =
@<< @<<<< @<<<<<<< @<<<<<<< SKY       @>/@<< @<<< @<<< @<<<<<<<< PHOT. PIXELS
$run, $ut, $mode, $projid, $n_meas, $n_int, $csotau, $seeing, $filter
.
format LONG_SCU =
@<< @<<<< @<<<<<<< @<<<<<<< @<<<<<<<< @>/@<< @<<< @<<< @<<<<<<<< @<<<<<<<<<<<<<< @<<<< @<<<< @<<<<< @<<<<<
$run, $ut, $mode, $projid, $object, $n_meas, $n_int, $csotau, $seeing, $filter, $boloms, $az, $el, $uaz, $uel
.

format LONG_NOISE =
@<< @<<<< @<<<<<<< @<<<<<<< @<<<<<<<< @>/@<< @<<< @<<< @<<<<<<<< @<<<<<<<<<<<<<< @<<<< @<<<< @<<<<< @<<<<<
$run, $ut, $mode, $projid, $fitsitem->{OBJ_TYPE}, $n_meas, $n_int, $csotau, $seeing, $filter, $boloms, $az, $el, $uaz, $uel
.

format LONG_SKYDIP =
@<< @<<<< @<<<<<<< @<<<<<<< SKY       @>/@<< @<<< @<<< @<<<<<<<< PHOT. PIXELS    @<<<< @<<<< @<<<<< @<<<<<
$run, $ut, $mode, $projid, $n_meas, $n_int, $csotau, $seeing, $filter, $az, $el, $uaz, $uel
.


    $= = 999;
    $^ = "STDOUT_${pformat}_SCU";
    $~ = ($mode =~ /^$/ ? "NOFITS" : $mode);

    if ($~ !~ /NOFITS/) {
	if ($fitsitem->{MODE} eq 'NOISE') {
	    $~ = "${pformat}_NOISE";
	} elsif ($fitsitem->{MODE} eq 'SKYDIP') {
	    $~ = "${pformat}_SKYDIP";
	} else {
	    $~ = "${pformat}_SCU";
	}
    }

    unless ($skip) {
      if ((not $cal_only) or ($cal_only and  $projid =~ /cal/i)) {
        write if ("${run}_${ut}" ne "${prev_obs}" || ($prtall));
      }
    }

#-----------------------------------------------------------------------
# Now try to decide whether this is a 'calibration' observation or not.
# If so, change the name to 'scuba' to make sure directory structure
# will be set up correctly.

# ----------------------------------------------------------------------
# Define non-calibration modes (rather than the other way around since
# there are only a few) and objects:

    my @obsmodes = ("PHOTOM", "MAP");
    my @calobjects = ("mars", "uranus", "neptune", "crl618", "hltau",
		   "crl2688", "irc10216", "irc+10216", "oh231.8",
		   "twhya", "vycma", "mercury", "venus",
                   "jupiter", "saturn", "pluto");

    my $calibration = ( $projid eq 'scuba' ? 1 : 0 );
    if ($calibration == 0) {
	$calibration = 1;
	foreach my $obsmode ( @obsmodes ) {
	    if ($mode eq $obsmode) {
		$calibration = 0;
		last;
	    }
	}
	if ($calibration == 0) {
	    foreach my $calobject ( @calobjects ) {
		if ($object eq $calobject) {
		    $calibration = 1;
		    last;
		}
	    }
	}
    }

    $projid = "scuba" if ($calibration == 1);

    return("${run}_${ut}");
}


# ----------------------------------------------------------------------
# Get project info from a GSD file

sub gsd_header {

    my ($path, $basename, $suffix, $prev_obs, $pformat, $debug) = @_;

    my $obsfile = File::Spec->catfile($path, $basename . '.' . $suffix);

# Read the file header

    my $het_format = "";
    $het_format = "since_03a" if ($datadir =~ /\d{8}$/);

    my %gsditem;
    tie %gsditem, 'GSD', "${obsfile}";
    do {foreach (keys %gsditem) { print "$_\n";}} if (defined $debug && $debug > 1);

    my $projid = lc($gsditem{C1PID});
    my $run    = lc($gsditem{C1SNO});
    my $mode   = uc($gsditem{C6ST});
    my $object = lc($gsditem{C1SNA1});
    my $rx     = uc($gsditem{C1RCV});
    my $utdate = $gsditem{C3DAT};
    $utdate =~ s/\.//g;
    # fix silly GSD error that causes ending 0's to be stripped
    $utdate = substr("${utdate}0000",0,8);
    my $uttime = $gsditem{C3UT};
    my $uth    = int ($uttime);
    my $utm    = int (60.0 * ($uttime-$uth));
    my $uts    = int (3600.0 * ($uttime-($uth+$utm/60.0)));
    my $ut     = sprintf "%8s %2.2d:%2.2d",${utdate},${uth},${utm};
    my $freq;
    if ($gsditem{C3NRS} == 1) {     # TimJ is too clever for his own good :)
      $freq   = 0.01 * int(100.0*$gsditem{C12RF}+0.5);
    } else {
      $freq   = 0.01 * int(100.0*$gsditem{C12RF}->[0]+0.5);
    }
    my $cfreq  = "${rx}/$freq";

    my $vel    = 0.01 * int(100.0*$gsditem{C7VR}+0.5);
    my $cvref = "$vel" . "/" . substr(lc($gsditem{C12VDEF}),0,3) .
	lc($gsditem{C12VREF});
    my $n_meas = lc($gsditem{C3CL});
    my $n_int  = lc($gsditem{C3NCYCLE});
    my $az     = $gsditem{C4AZ};
    my $el     = $gsditem{C4EL};
    my $uaz    = $gsditem{UAZ};
    my $uel    = $gsditem{UEL};
    my $seeing = "n/a";
    my $csotau = "n/a";
    if ( defined $gsditem{C7SEEING}) {
      $seeing = 0.01 * int(100.0*$gsditem{C7SEEING}+0.5);
    }
    if ( defined $gsditem{C7TAU225}) {
      $csotau = 0.01 * int(100.0*$gsditem{C7TAU225}+0.5);
    }

    # Set format
format STDOUT_SHORT_HET =
@<<<<<<<< UT       Mode     Source   Sec/Cyc Tau  See  Rx/Freq   Vel/Velsys
$origin
.

format STDOUT_SHORT_HET2 =
@<<<<< UT  Projid     Mode     Source   Sec/Cyc Tau  See  Rx/Freq   Vel/Velsys
$origin
.

format STDOUT_LONG_HET =
@<<<<<<<< UT       Mode     Source   Sec/Cyc Tau  See  Rx/Freq   Vel/Velsys   Az    El    Uaz    Uel
$origin
.

format STDOUT_LONG_HET2 =
@<<<<< UT  Projid     Mode     Source   Sec/Cyc Tau  See  Rx/Freq   Vel/Velsys   Az    El    Uaz    Uel
$origin
.

format SHORT_HET =
@<< @<<<<<<<<<<<<< @<<<<<<< @<<<<<<<< @>/@<< @<<< @<<< @<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<
$run, $ut, $mode, $object, $n_meas, $n_int, $csotau, $seeing, $cfreq, $cvref
.

format SHORT_HET2 =
@<< @<<<<< @<<<<<<<<< @<<<<<<< @<<<<<<<< @>/@<< @<<< @<<< @<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<
$run, substr($ut,9,5), $projid, $mode, $object, $n_meas, $n_int, $csotau, $seeing, $cfreq, $cvref
.

format LONG_HET =
@<< @<<<<<<<<<<<<< @<<<<<<< @<<<<<<<< @>/@<< @<<< @<<< @<<<<<<<< @<<<<<<<<<<< @<<<< @<<<< @<<<<< @<<<<<
$run, $ut, $mode, $object, $n_meas, $n_int, $csotau, $seeing, $cfreq, $cvref, $az, $el, $uaz, $uel
.

format LONG_HET2 =
@<< @<<<<< @<<<<<<<<< @<<<<<<< @<<<<<<<< @>/@<< @<<< @<<< @<<<<<<<< @<<<<<<<<<<< @<<<< @<<<< @<<<<< @<<<<<
$run, substr($ut,9,5), $projid, $mode, $object, $n_meas, $n_int, $csotau, $seeing, $cfreq, $cvref, $az, $el, $uaz, $uel
.

    $= = 999;
    if ($het_format eq 'since_03a') {
      $^ = "STDOUT_${pformat}_HET2";
    } else {
      $^ = "STDOUT_${pformat}_HET";
    }
    $~ = ($mode =~ /^$/ ? "NOFITS" : $mode);

    if ($~ !~ /NOFITS/) {
      if ($het_format eq 'since_03a') {
        $~ = "${pformat}_HET2";
      } else {
        $~ = "${pformat}_HET";
      }
    }

    unless ($skip) {
      if ((not $cal_only) or ($cal_only and  $projid =~ /cal/i)) {
        write if ("${run}_${ut}" ne "${prev_obs}" || ($prtall));
      }
    }

    return("${run}_${ut}");
}


# ----------------------------------------------------------------------
# Get ACSIS tsys and trx

sub acsis_tsys {

  my $REC_HEADER_DONE;
  my ($sdffile, $projid, $mode, $run, $freq ) = @_;

  if ((not $cal_only) or ($cal_only and  $projid =~ /cal/i)) {

    unless ($mode eq "POINTING" or $mode eq "FOCUS") {

      my $obsnr     = "";
      my $obslab    = "";
      my $datestamp = "";
      my $rfreq = "";
      my $rflab = "";

      if ($skip) {
        $obsnr     = "$run";
        $obslab    = "Nr";
        $datestamp = "${origin}";
        $rfreq     = sprintf("%5.1f",$freq);
        $rflab     = sprintf("%5.5s","RFreq");
      }

      if ($tsys) {
        my @tsys_all = split(/\n/,
           `${tsyscmd} -statistics ${sdffile} | grep '[A-Za-z]'`);
        $tsys_all[1] =~ s/\[median\]/\[Tsys\]/;
        $tsys_all[3] =~  s/\[stdev\]/\[ \+\/\-\]/;

        unless (defined $REC_HEADER_DONE) {
          printf "%-3s %s %s %6s\n", $obslab,$rflab, $tsys_all[0], $datestamp;
          $REC_HEADER_DONE = 1;
        }
        printf "%-3s %s %s\n", $obsnr, $rfreq, $tsys_all[1];
        printf "%-3s %s %s\n", $obsnr, $rfreq, $tsys_all[3] if ($tsysrms);

      }

      if ($trx) {
        my @trx_all =  split(/\n/,
           `${tsyscmd} -trx -statistics ${sdffile} | grep '[A-Za-z]'`);
        $trx_all[1] =~ s/\[median\]/\[Trx\]/;
        $trx_all[3] =~  s/\[stdev\]/\[ \+\/\-\]/;

        unless (defined $REC_HEADER_DONE) {
          printf "%-3s %s %s %6s\n", $obslab,$rflab, $trx_all[0], $datestamp;
          $REC_HEADER_DONE = 1;
        }
        printf "%-3s %s %s\n", $obsnr, $rfreq, $trx_all[1];
        printf "%-3s %s %s\n", $obsnr, $rfreq, $trx_all[3] if ($trxrms);
      }

      $REC_HEADER_DONE = undef unless $skip;

    }

  }

}

# Calculate items that are identical for ACSIS and SCUBA-2
sub calc_shared_scuba2_acsis {
  my $fitsitem = shift;
  my $fitsitem2 = shift;

  my %results;

  $results{PROJECT} = uc($fitsitem->{PROJECT});
  $results{OCSCFG} = $fitsitem->{OCSCFG};
  $results{RUN}    = lc($fitsitem->{OBSNUM});
  (my $date, $results{UT}) = split(/T/, $fitsitem->{'DATE-OBS'});
  $date =~ s/\-/\//g;
  $results{DATETIME} = "$date $results{UT}";
  $results{OBSTYPE}  = uc($fitsitem->{OBS_TYPE});
  $results{OBJECT}   = (defined $fitsitem->{OBJECT} ? "$fitsitem->{OBJECT}" : "");
  $results{OBJECT} =~ s/\s+//g;

  my $az     = ((defined $fitsitem->{AZSTART} and defined $fitsitem2->{'AZEND'}) ?
                sprintf("%6.2f",0.5*($fitsitem->{AZSTART}+$fitsitem2->{AZEND})) :
                sprintf("%6s","n/a") );
  my $el     = ((defined $fitsitem->{ELSTART} and defined $fitsitem2->{'ELEND'}) ?
                sprintf("%5.2f",0.5*($fitsitem->{ELSTART}+$fitsitem2->{ELEND})) :
                sprintf("%5s","n/a") );

  $results{AZ}     = $az;
  $results{EL}     = $el;
  $results{UAZ}    = (defined $fitsitem->{UAZ} ?
                      sprintf("%5.1f",1.0*$fitsitem->{UAZ}) :
                      sprintf("%5s","n/a") );
  $results{UEL}    = (defined $fitsitem->{UEL} ?
                      sprintf("%5.1f",1.0*$fitsitem->{UEL}) :
                      sprintf("%5s","n/a") );

  # Calculate a concatenated INBEAM string
  # Look for INBEAM modifier for aux instruments
  my $inbeam = '';
  if (defined $fitsitem->{INBEAM}) {
    $inbeam = $fitsitem->{INBEAM};

    # remove shutter
    $inbeam =~ s/shutter\s*//i;

    # replace all POL strings with a single pol string
    my $havepol = ($inbeam =~ /\bpol/i);
    $inbeam =~ s/\b(pol[2]?[_\w]*(\s+|\b))//gi;
    $inbeam .= "pol" if $havepol;

    # remove spaces for concatenation so POL + FTS2 => POLFTS2
    $inbeam =~ s/\s//g;

    # force upper case for consistency with mode
    $inbeam = uc($inbeam);
  }

  # Convert timestamps
  my %genitem  = translate_from_FITS( $fitsitem );
  my %genitem2 = translate_from_FITS( $fitsitem2 );

  my $obstime = " n/a";
  my $seeing  = " n/a";
  my $csotau  = " n/a";
  my $wvmtau  = " n/a";
  my $lseeing = " n/a";
  my $lcsotau = " n/a";
  my $lwvmtau = " n/a";
  my $domestate = " n/a";
  my $simulate = '?';

  $obstime = sprintf("%4d", $genitem2{UTEND} - $genitem{UTSTART})
    if (defined $genitem2{UTEND} and defined $genitem{UTSTART});
  $seeing = 0.01 * int(100.0*
                       0.5*($fitsitem->{SEEINGST}+$fitsitem2->{SEEINGEN})+0.5)
    if defined $fitsitem->{SEEINGST} and defined $fitsitem2->{SEEINGEN};
  $csotau = 0.01 * int(100.0*
                       0.5*($fitsitem->{TAU225ST}+$fitsitem2->{TAU225EN})+0.5)
    if defined $fitsitem->{TAU225ST} and defined $fitsitem2->{TAU225EN};
  $wvmtau = 0.01 * int(100.0*
                       0.5*($fitsitem->{WVMTAUST}+$fitsitem2->{WVMTAUEN})+0.5)
    if defined $fitsitem->{WVMTAUST} and defined $fitsitem2->{WVMTAUEN};
  $lseeing = 0.001 * int(1000.0*
                         0.5*($fitsitem->{SEEINGST}+$fitsitem2->{SEEINGEN})+0.5)
    if defined $fitsitem->{SEEINGST} and defined $fitsitem2->{SEEINGEN};
  $lcsotau = 0.001 * int(1000.0*
                         0.5*($fitsitem->{TAU225ST}+$fitsitem2->{TAU225EN})+0.5)
    if defined $fitsitem->{TAU225ST} and defined $fitsitem2->{TAU225EN};
  $lwvmtau = 0.001 * int(1000.0*
                         0.5*($fitsitem->{WVMTAUST}+$fitsitem2->{WVMTAUEN})+0.5)
    if defined $fitsitem->{WVMTAUST} and defined $fitsitem2->{WVMTAUEN};

  if (defined $genitem{'DOME_OPEN'} and defined $genitem2{'DOME_OPEN'}) {
    if ($genitem{'DOME_OPEN'} != $genitem2{'DOME_OPEN'}) {
      $domestate = 'Mixd';
    }
    else {
      $domestate = $genitem{'DOME_OPEN'} ? 'Open' : 'Clsd';
    }
  }
  if (defined $fitsitem->{'SIMULATE'}) {
    unless ($fitsitem->{'SIMULATE'}) {
      $simulate = '-',
    }
    else {
      my %simsys;
      foreach my $simhdr (keys %$fitsitem) {
        next unless $simhdr =~ /^SIM_([A-Z])/;
        undef $simsys{$1} if $fitsitem->{$simhdr};
      }
      unless (%simsys) {
        $simulate = '!';
      }
      else {
        $simulate = join ',', sort keys %simsys;
      }
    }
  }

  %results = ( %results,
               OBSTIME => $obstime,
               SEEING => $seeing,
               CSOTAU => $csotau,
               WVMTAU => $wvmtau,
               LSEEING => $lseeing,
               LCSOTAU => $lcsotau,
               LWVMTAU => $lwvmtau,
               INBEAM => $inbeam,
               DOMESTATE => $domestate,
               SIMULATE => $simulate,
             );

  return %results;

}

=head1 SEE ALSO

SMURF: gettsys

=head1 AUTHOR

Remo Tilanus E<lt>r.tilanus@jach.hawaii.eduE<gt>,
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2006-2007 Particle Physics and Astronomy Research Council.
Copyright (C) 2007-2012 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut
